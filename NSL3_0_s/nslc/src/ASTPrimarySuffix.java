/* Generated By:JJTree: Do not edit this line. ASTPrimarySuffix.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

public class ASTPrimarySuffix extends SimpleNode {

    String expressionType = "";
    boolean isMethod = false;

    public ASTPrimarySuffix(int id) {
        super(id);
    }

    public ASTPrimarySuffix(NslParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(NslParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void removeBraces(String prefix, String sufix) {
        if (isNodeOfType("index")) {
            ASTExpression expr = (ASTExpression) jjtGetChild(0);
            first.image = prefix + expr.getExpression();
            last.image = sufix;
            first.next = last;
        }
    }

    public String[] getArgumentsTypes() {
        if (isNodeOfType("method")) {
            ASTArguments args = (ASTArguments) jjtGetChild(0);
            return args.getArgumentsTypes();
        }
        return null;
    }

    public String getVariableName() {
        if (isNodeOfType("access")) {
            return first.next.image;
        }
        return null;
    }

    public void setType(String type) {
        expressionType = type;
    }

    public void setMethod(boolean value) {
        isMethod = value;
    }

    public boolean isMethodName() {
        return isMethod;
    }

    public String toXMLOpen(String prefix) {
        String nodeType = getNodeType();
        String value = "";
        switch (nodeType) {
            case ".this":
                value = "<Name type=\"" + expressionType + "\">this</Name>";
                break;
            case ".super":
                value = "<Name type=\"" + expressionType + "\">super</Name>";
                break;
            case "access":
                String method = (isMethod ? " isMethod=\"true\"" : "");
                value = "<Name type=\"" + expressionType + "\"" + method + ">" + first.next.image + "</Name>";
                break;
        }
        return prefix + "<" + toString() + ">" + value;
    }
}
