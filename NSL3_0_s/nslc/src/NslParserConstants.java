/* Generated By:JJTree&JavaCC: Do not edit this line. NslParserConstants.java */
@SuppressWarnings("unused")
public interface NslParserConstants {

    int EOF = 0;
    int SINGLE_LINE_COMMENT = 9;
    int FORMAL_COMMENT = 10;
    int MULTI_LINE_COMMENT = 11;
    int ABSTRACT = 13;
    int BOOLEAN = 14;
    int BREAK = 15;
    int BYTE = 16;
    int CASE = 17;
    int CATCH = 18;
    int CHAR = 19;
    int CLASS = 20;
    int CONST = 21;
    int CONTINUE = 22;
    int _DEFAULT = 23;
    int DO = 24;
    int DOUBLE = 25;
    int ELSE = 26;
    int EXTENDS = 27;
    int FALSE = 28;
    int FINAL = 29;
    int FINALLY = 30;
    int FLOAT = 31;
    int FOR = 32;
    int GOTO = 33;
    int IF = 34;
    int IMPLEMENTS = 35;
    int IMPORT = 36;
    int INSTANCEOF = 37;
    int INT = 38;
    int INTERFACE = 39;
    int LONG = 40;
    int NATIVE = 41;
    int NEW = 42;
    int NULL = 43;
    int PACKAGE = 44;
    int PRIVATE = 45;
    int PROTECTED = 46;
    int PUBLIC = 47;
    int RETURN = 48;
    int SHORT = 49;
    int STATIC = 50;
    int SUPER = 51;
    int SWITCH = 52;
    int SYNCHRONIZED = 53;
    int THIS = 54;
    int THROW = 55;
    int THROWS = 56;
    int TRANSIENT = 57;
    int TRUE = 58;
    int TRY = 59;
    int VOID = 60;
    int VOLATILE = 61;
    int WHILE = 62;
    int STRICTFP = 63;
    int ASSERT = 64;
    int NSLIMPORT = 65;
    int NSLCLASS = 66;
    int NSLPORT = 67;
    int NSLINPORT = 68;
    int NSLOUTPORT = 69;
    int NSLCONSTANT = 70;
    int NSLMODEL = 71;
    int NSLMODULE = 72;
    int NSLINMODULE = 73;
    int NSLOUTMODULE = 74;
    int CHARSTRING = 75;
    int VERBATIMNSLJ = 76;
    int VERBATIMNSLC = 77;
    int VERBATIMOFF = 78;
    int VERBATIMTEMPJ = 79;
    int VERBATIMTEMPC = 80;
    int MULTI_LINE_VERBATIM = 81;
    int INTEGER_LITERAL = 83;
    int DECIMAL_LITERAL = 84;
    int HEX_LITERAL = 85;
    int OCTAL_LITERAL = 86;
    int FLOATING_POINT_LITERAL = 87;
    int EXPONENT = 88;
    int CHARACTER_LITERAL = 89;
    int STRING_LITERAL = 90;
    int IDENTIFIER = 91;
    int LETTER = 92;
    int DIGIT = 93;
    int LPAREN = 94;
    int RPAREN = 95;
    int LBRACE = 96;
    int RBRACE = 97;
    int LBRACKET = 98;
    int RBRACKET = 99;
    int SEMICOLON = 100;
    int COMMA = 101;
    int DOT = 102;
    int ASSIGN = 103;
    int GT = 104;
    int LT = 105;
    int BANG = 106;
    int TILDE = 107;
    int HOOK = 108;
    int COLON = 109;
    int EQ = 110;
    int LE = 111;
    int GE = 112;
    int NE = 113;
    int SC_OR = 114;
    int SC_AND = 115;
    int INCR = 116;
    int DECR = 117;
    int PLUS = 118;
    int MINUS = 119;
    int STAR = 120;
    int SLASH = 121;
    int BIT_AND = 122;
    int BIT_OR = 123;
    int XOR = 124;
    int REM = 125;
    int LSHIFT = 126;
    int RSIGNEDSHIFT = 127;
    int RUNSIGNEDSHIFT = 128;
    int PLUSASSIGN = 129;
    int MINUSASSIGN = 130;
    int STARASSIGN = 131;
    int SLASHASSIGN = 132;
    int ANDASSIGN = 133;
    int ORASSIGN = 134;
    int XORASSIGN = 135;
    int REMASSIGN = 136;
    int LSHIFTASSIGN = 137;
    int RSIGNEDSHIFTASSIGN = 138;
    int RUNSIGNEDSHIFTASSIGN = 139;

    int DEFAULT = 0;
    int IN_SINGLE_LINE_COMMENT = 1;
    int IN_FORMAL_COMMENT = 2;
    int IN_MULTI_LINE_COMMENT = 3;
    int IN_MULTI_LINE_VERBATIM = 4;

    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"//\"",
            "<token of kind 7>",
            "\"/*\"",
            "<SINGLE_LINE_COMMENT>",
            "\"*/\"",
            "\"*/\"",
            "<token of kind 12>",
            "\"abstract\"",
            "\"boolean\"",
            "\"break\"",
            "\"byte\"",
            "\"case\"",
            "\"catch\"",
            "\"char\"",
            "\"class\"",
            "\"const\"",
            "\"continue\"",
            "\"default\"",
            "\"do\"",
            "\"double\"",
            "\"else\"",
            "\"extends\"",
            "\"false\"",
            "\"final\"",
            "\"finally\"",
            "\"float\"",
            "\"for\"",
            "\"goto\"",
            "\"if\"",
            "\"implements\"",
            "\"import\"",
            "\"instanceof\"",
            "\"int\"",
            "\"interface\"",
            "\"long\"",
            "\"native\"",
            "\"new\"",
            "\"null\"",
            "\"package\"",
            "\"private\"",
            "\"protected\"",
            "\"public\"",
            "\"return\"",
            "\"short\"",
            "\"static\"",
            "\"super\"",
            "\"switch\"",
            "\"synchronized\"",
            "\"this\"",
            "\"throw\"",
            "\"throws\"",
            "\"transient\"",
            "\"true\"",
            "\"try\"",
            "\"void\"",
            "\"volatile\"",
            "\"while\"",
            "\"strictfp\"",
            "\"assert\"",
            "\"nslImport\"",
            "\"nslClass\"",
            "\"nslPort\"",
            "\"nslInPort\"",
            "\"nslOutPort\"",
            "\"nslConstant\"",
            "\"nslModel\"",
            "\"nslModule\"",
            "\"nslInModule\"",
            "\"nslOutModule\"",
            "\"charString\"",
            "<VERBATIMNSLJ>",
            "<VERBATIMNSLC>",
            "<VERBATIMOFF>",
            "<VERBATIMTEMPJ>",
            "<VERBATIMTEMPC>",
            "<MULTI_LINE_VERBATIM>",
            "<token of kind 82>",
            "<INTEGER_LITERAL>",
            "<DECIMAL_LITERAL>",
            "<HEX_LITERAL>",
            "<OCTAL_LITERAL>",
            "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>",
            "<CHARACTER_LITERAL>",
            "<STRING_LITERAL>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
            "\"(\"",
            "\")\"",
            "\"{\"",
            "\"}\"",
            "\"[\"",
            "\"]\"",
            "\";\"",
            "\",\"",
            "\".\"",
            "\"=\"",
            "\">\"",
            "\"<\"",
            "\"!\"",
            "\"~\"",
            "\"?\"",
            "\":\"",
            "\"==\"",
            "\"<=\"",
            "\">=\"",
            "\"!=\"",
            "\"||\"",
            "\"&&\"",
            "\"++\"",
            "\"--\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"&\"",
            "\"|\"",
            "\"^\"",
            "\"%\"",
            "\"<<\"",
            "\">>\"",
            "\">>>\"",
            "\"+=\"",
            "\"-=\"",
            "\"*=\"",
            "\"/=\"",
            "\"&=\"",
            "\"|=\"",
            "\"^=\"",
            "\"%=\"",
            "\"<<=\"",
            "\">>=\"",
            "\">>>=\"",
            "\"@\"",
    };

}
