/* Generated By:JJTree: Do not edit this line. ASTNslFieldDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

@SuppressWarnings("Duplicates")
public class ASTNslFieldDeclaration extends SimpleNode {

    boolean publicField = false,
            privateField = true,
            protectedField = false;

    public ASTNslFieldDeclaration(int id) {
        super(id);
    }

    public ASTNslFieldDeclaration(NslParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(NslParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public void setPublic(boolean value) {
        publicField = value;
        privateField = !value;
        protectedField = !value;
    }

    public void setPrivate(boolean value) {
        publicField = !value;
        privateField = value;
        protectedField = !value;
    }

    public void setProtected(boolean value) {
        publicField = !value;
        privateField = !value;
        protectedField = value;
    }

    public boolean isPublic() {
        return publicField;
    }

    public boolean isPrivate() {
        return privateField;
    }

    public boolean isProtected() {
        return protectedField;
    }

    public String getQualifiers() {
        StringBuilder qual = new StringBuilder();
        SimpleNode arg = (SimpleNode) jjtGetChild(0);

        Token t = first;
        Token end = arg.getFirstToken();

        while (t != end) {
            qual.append(t.image).append(" ");
            t = t.next;
        }
        return qual.toString();
    }

    public String getType() {
        SimpleNode nameNode = (SimpleNode) jjtGetChild(0);
        String name;
        if (nameNode instanceof ASTName) {
            name = ((ASTName) nameNode).getName();
        } else {
            name = ((ASTPrimitiveType) nameNode).getType();
        }

        return name;
    }

    public String[] getVariables() {
        int num = jjtGetNumChildren() - 1;
        String[] names = new String[num];

        if (jjtGetChild(0) instanceof ASTName) {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++) {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                names[i] = variable.getName();
            }
        } else {
            ASTNslArrayDeclarator variable;
            for (int i = 0; i < num; i++) {
                variable = (ASTNslArrayDeclarator) jjtGetChild(i + 1);
                names[i] = variable.getName();
            }
        }

        return names;
    }

    public String[] getArguments() {
        int num = jjtGetNumChildren() - 1;
        String[] arguments = new String[num];

        if (jjtGetChild(0) instanceof ASTName) {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++) {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                arguments[i] = variable.getArguments();
            }
        } else {
            ASTNslArrayDeclarator variable;
            for (int i = 0; i < num; i++) {
                variable = (ASTNslArrayDeclarator) jjtGetChild(i + 1);
                arguments[i] = variable.getArrayArguments();
            }
        }

        return arguments;
    }

    public String[] getVariableInitializer() {
        int num = jjtGetNumChildren() - 1;
        String[] init = new String[num];

        if (jjtGetChild(0) instanceof ASTName) {
            ASTNslVariableDeclarator variable;
            for (int i = 0; i < num; i++) {
                variable = (ASTNslVariableDeclarator) jjtGetChild(i + 1);
                init[i] = variable.getVariableInitializer();
            }
        } else {
            for (int i = 0; i < num; i++) {
                init[i] = null;
            }
        }

        return init;
    }

    public String getArraySuffix(int dim) {
        StringBuilder suffix = new StringBuilder();
        for (int i = 0; i < dim; i++) {
            suffix.append("[]");
        }
        return suffix.toString();
    }

    public String getTypeSuffix(int child) {
        if (jjtGetChild(0) instanceof ASTName) {
            return "";
        } else {
            ASTNslArrayDeclarator variable;
            variable = (ASTNslArrayDeclarator) jjtGetChild(child + 1);
            return getArraySuffix(variable.getDim());
        }
    }

    public String toJava(NslScope scope) {

        StringBuilder code = new StringBuilder(((getQualifiers().equals("")) ? "" : (getQualifiers() + " ")));
        code.append(getType()).append(" ");

        String[] vars = getVariables();

        if (vars.length > 0) {
            code.append(vars[0]).append(getTypeSuffix(0));
            for (int i = 1; i < vars.length; i++) {
                code.append(", ").append(vars[i]).append(getTypeSuffix(i));
            }
        }

        first.image = code.toString();
        first.next = last;

        return code.toString();
    }

    boolean isNslType;

    public void updateScope(NslScope scope) {
        String qualifiers = getQualifiers();
        String type = getType();
        String[] names = getVariables();
        NslVariable temp;
        isNslType = false;
        if (jjtGetChild(0) instanceof ASTName || (type.contains("String"))) {
            String classType = type;
            isNslType = !(type.contains("String"));
            if (scope.isArray(classType)) {
                classType = classType.substring(0, classType.indexOf("["));
            }
            NslCompiler.parseType(classType, scope.getImportList());
        }

        for (int i = 0; i < names.length; i++) {
            temp = new NslVariable(qualifiers, type + getTypeSuffix(i), names[i], (SimpleNode) jjtGetChild(i + 1));
            temp.setNslType(isNslType);
            temp.setNslArrayType(!isNslType);
            if (!scope.addLocalVar(temp)) {
                ASTVariableDeclarator variable = (ASTVariableDeclarator) jjtGetChild(i + 1);
                NslCompiler.printError("ASTFiledDeclaration", "Variable " + variable.getName() + " was already defined in this scope", variable.getFirstToken().beginLine, variable.getFirstToken().beginColumn);
            }
        }
    }

    public String toXMLOpen(String prefix) {
        String modifiers = getQualifiers();
        return prefix + "<" + toString() + " modifiers=\"" + modifiers + "\">";
    }
}
