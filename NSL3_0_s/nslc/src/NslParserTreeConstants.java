/* Generated By:JJTree: Do not edit this line. NslParserTreeConstants.java */

public interface NslParserTreeConstants {
    int JJTNSLIMPORTDECLARATION = 0;
    int JJTNSLCLASSDECLARATION = 1;
    int JJTNSLNESTEDCLASSDECLARATION = 2;
    int JJTNSLFIELDDECLARATION = 3;
    int JJTNSLLOCALVARIABLEDECLARATION = 4;
    int JJTNSLVARIABLEDECLARATOR = 5;
    int JJTNSLARRAYDECLARATOR = 6;
    int JJTCOMPILATIONUNIT = 7;
    int JJTPACKAGEDECLARATION = 8;
    int JJTIMPORTDECLARATION = 9;
    int JJTTYPEDECLARATION = 10;
    int JJTCLASSDECLARATION = 11;
    int JJTUNMODIFIEDCLASSDECLARATION = 12;
    int JJTCLASSBODY = 13;
    int JJTNESTEDCLASSDECLARATION = 14;
    int JJTCLASSBODYDECLARATION = 15;
    int JJTMETHODDECLARATIONLOOKAHEAD = 16;
    int JJTINTERFACEDECLARATION = 17;
    int JJTNESTEDINTERFACEDECLARATION = 18;
    int JJTUNMODIFIEDINTERFACEDECLARATION = 19;
    int JJTINTERFACEMEMBERDECLARATION = 20;
    int JJTFIELDDECLARATION = 21;
    int JJTVARIABLEDECLARATOR = 22;
    int JJTVARIABLEDECLARATORID = 23;
    int JJTVARIABLEINITIALIZER = 24;
    int JJTARRAYINITIALIZER = 25;
    int JJTMETHODDECLARATION = 26;
    int JJTMETHODDECLARATOR = 27;
    int JJTFORMALPARAMETERS = 28;
    int JJTFORMALPARAMETER = 29;
    int JJTCONSTRUCTORDECLARATION = 30;
    int JJTEXPLICITCONSTRUCTORINVOCATION = 31;
    int JJTINITIALIZER = 32;
    int JJTTYPE = 33;
    int JJTPRIMITIVETYPE = 34;
    int JJTRESULTTYPE = 35;
    int JJTNAME = 36;
    int JJTNAMELIST = 37;
    int JJTEXPRESSION = 38;
    int JJTASSIGNMENTOPERATOR = 39;
    int JJTCONDITIONALEXPRESSION = 40;
    int JJTCONDITIONALOREXPRESSION = 41;
    int JJTCONDITIONALANDEXPRESSION = 42;
    int JJTINCLUSIVEOREXPRESSION = 43;
    int JJTEXCLUSIVEOREXPRESSION = 44;
    int JJTANDEXPRESSION = 45;
    int JJTEQUALITYEXPRESSION = 46;
    int JJTINSTANCEOFEXPRESSION = 47;
    int JJTRELATIONALEXPRESSION = 48;
    int JJTSHIFTEXPRESSION = 49;
    int JJTADDITIVEEXPRESSION = 50;
    int JJTMULTIPLICATIVEEXPRESSION = 51;
    int JJTUNARYEXPRESSION = 52;
    int JJTPREINCREMENTEXPRESSION = 53;
    int JJTPREDECREMENTEXPRESSION = 54;
    int JJTUNARYEXPRESSIONNOTPLUSMINUS = 55;
    int JJTCASTLOOKAHEAD = 56;
    int JJTPOSTFIXEXPRESSION = 57;
    int JJTCASTEXPRESSION = 58;
    int JJTPRIMARYEXPRESSION = 59;
    int JJTPRIMARYPREFIX = 60;
    int JJTPRIMARYSUFFIX = 61;
    int JJTLITERAL = 62;
    int JJTBOOLEANLITERAL = 63;
    int JJTNULLLITERAL = 64;
    int JJTARGUMENTS = 65;
    int JJTARGUMENTLIST = 66;
    int JJTALLOCATIONEXPRESSION = 67;
    int JJTARRAYDIMSANDINITS = 68;
    int JJTSTATEMENT = 69;
    int JJTLABELEDSTATEMENT = 70;
    int JJTBLOCK = 71;
    int JJTBLOCKSTATEMENT = 72;
    int JJTLOCALVARIABLEDECLARATION = 73;
    int JJTEMPTYSTATEMENT = 74;
    int JJTSTATEMENTEXPRESSION = 75;
    int JJTSWITCHSTATEMENT = 76;
    int JJTSWITCHLABEL = 77;
    int JJTIFSTATEMENT = 78;
    int JJTWHILESTATEMENT = 79;
    int JJTDOSTATEMENT = 80;
    int JJTFORSTATEMENT = 81;
    int JJTFORINIT = 82;
    int JJTSTATEMENTEXPRESSIONLIST = 83;
    int JJTFORUPDATE = 84;
    int JJTBREAKSTATEMENT = 85;
    int JJTCONTINUESTATEMENT = 86;
    int JJTRETURNSTATEMENT = 87;
    int JJTTHROWSTATEMENT = 88;
    int JJTSYNCHRONIZEDSTATEMENT = 89;
    int JJTTRYSTATEMENT = 90;
    int JJTASSERTSTATEMENT = 91;
    int JJTERROR_SKIPTO = 92;


    String[] jjtNodeName = {
            "NslImportDeclaration",
            "NslClassDeclaration",
            "NslNestedClassDeclaration",
            "NslFieldDeclaration",
            "NslLocalVariableDeclaration",
            "NslVariableDeclarator",
            "NslArrayDeclarator",
            "CompilationUnit",
            "PackageDeclaration",
            "ImportDeclaration",
            "TypeDeclaration",
            "ClassDeclaration",
            "UnmodifiedClassDeclaration",
            "ClassBody",
            "NestedClassDeclaration",
            "ClassBodyDeclaration",
            "MethodDeclarationLookahead",
            "InterfaceDeclaration",
            "NestedInterfaceDeclaration",
            "UnmodifiedInterfaceDeclaration",
            "InterfaceMemberDeclaration",
            "FieldDeclaration",
            "VariableDeclarator",
            "VariableDeclaratorId",
            "VariableInitializer",
            "ArrayInitializer",
            "MethodDeclaration",
            "MethodDeclarator",
            "FormalParameters",
            "FormalParameter",
            "ConstructorDeclaration",
            "ExplicitConstructorInvocation",
            "Initializer",
            "Type",
            "PrimitiveType",
            "ResultType",
            "Name",
            "NameList",
            "Expression",
            "AssignmentOperator",
            "ConditionalExpression",
            "ConditionalOrExpression",
            "ConditionalAndExpression",
            "InclusiveOrExpression",
            "ExclusiveOrExpression",
            "AndExpression",
            "EqualityExpression",
            "InstanceOfExpression",
            "RelationalExpression",
            "ShiftExpression",
            "AdditiveExpression",
            "MultiplicativeExpression",
            "UnaryExpression",
            "PreIncrementExpression",
            "PreDecrementExpression",
            "UnaryExpressionNotPlusMinus",
            "CastLookahead",
            "PostfixExpression",
            "CastExpression",
            "PrimaryExpression",
            "PrimaryPrefix",
            "PrimarySuffix",
            "Literal",
            "BooleanLiteral",
            "NullLiteral",
            "Arguments",
            "ArgumentList",
            "AllocationExpression",
            "ArrayDimsAndInits",
            "Statement",
            "LabeledStatement",
            "Block",
            "BlockStatement",
            "LocalVariableDeclaration",
            "EmptyStatement",
            "StatementExpression",
            "SwitchStatement",
            "SwitchLabel",
            "IfStatement",
            "WhileStatement",
            "DoStatement",
            "ForStatement",
            "ForInit",
            "StatementExpressionList",
            "ForUpdate",
            "BreakStatement",
            "ContinueStatement",
            "ReturnStatement",
            "ThrowStatement",
            "SynchronizedStatement",
            "TryStatement",
            "AssertStatement",
            "error_skipto",
    };
}
