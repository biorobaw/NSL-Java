/* Generated By:JJTree: Do not edit this line. ASTNslLocalVariableDeclaration.java */

/* SCCS  %W--- %G% -- %U% */

// Copyright: Copyright (c) 1997-2002 University of Southern California Brain Project.
// Copyright: This software may be freely copied provided the toplevel
// Copyright: COPYRIGHT file is included with each such copy.
// Copyright: Email nsl@java.usc.edu.

// Author: Salvador Marmol

@SuppressWarnings("Duplicates")
public class ASTNslLocalVariableDeclaration extends ASTNslFieldDeclaration {

    private static String endLine = System.getProperty("line.separator");

    public ASTNslLocalVariableDeclaration(int id) {
        super(id);
    }

    public ASTNslLocalVariableDeclaration(NslParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(NslParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public String toJava(NslScope scope) {

        String qual = ((getQualifiers().equals("")) ? "" : (getQualifiers() + " "));
        String type = getType();
        String[] vars = getVariables();
        String[] args = getArguments();
        String[] init = getVariableInitializer();

        StringBuilder code = new StringBuilder();

        String sufix = getIndentation(first);
        for (int i = 0; i < vars.length; i++) {
            if (isNslType) {
                code.append(qual).append(type).append(" ").append(vars[i]).append(" = new ").append(type).append("(").append(args[i]).append(");").append(endLine).append(sufix);
                if (init[i] != null) {
                    code.append(vars[i]).append(".set(").append(init[i]).append(");").append(endLine).append(sufix);
                }
            } else {
                code.append(qual).append(type).append(" ").append(vars[i]).append(" = new ").append(type).append(args[i]).append(";").append(endLine).append(sufix);
            }
        }

        first.image = code.toString();
        first.next = last.next.next;

        return code.toString();
    }

    public String getQualifiers() {
        StringBuilder qual = new StringBuilder();
        SimpleNode node = (SimpleNode) jjtGetChild(0);

        Token t = first;
        Token end = node.getFirstToken();

        while (t != end) {
            qual.append(t.image).append(" ");
            t = t.next;
        }
        return qual.toString();
    }

    public String toXMLOpen(String prefix) {
        String modifiers = getQualifiers();
        return prefix + "<" + toString() + " modifiers=\"" + modifiers + "\">";
    }
}
