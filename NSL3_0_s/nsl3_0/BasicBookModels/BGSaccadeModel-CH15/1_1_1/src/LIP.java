/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)LIP.mod	1.8 --- 08/05/99 -- 13:56:25 : jversion  @(#)LIP.mod	1.2---04/23/99--18:39:33 */
//Module: LIP - Lateral IntraParital (Cortex)

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

//
//LIPvis
//
/**
*A class representing the lateral Intraparital Cortex layer of Crowley Model.
*@see Michael Crowley Model
*@version   Fall 96
*@ author   HBP
* -var public lipvistm used in LIPvis to calculate the membrane potential at
 lipvistm.<p>
* -var public lipvistm used in LIPmem to calculate the membrane potential at
 lipmemtm.<p>
*/  
 public class LIP extends NslModule/*(int array_size)*/ {
  
    // intputs
    NslDinDouble2 ThLIPmem_in ; /*(array_size,array_size)  */
    NslDinDouble2 SLIPvis_in ; /*(array_size,array_size) */ //RETINA

    // outputs
   NslDoutDouble2 LIPvis_out ; /* (array_size,array_size) */
   NslDoutDouble2 LIPmem_out ; /* (array_size,array_size) */

//private variables

  // these were public but why
  private  double lipvistm;
  private  double lipmemtm;
  private  double LIPmemK;
  private  double LIPvissigma1;
  private  double LIPvissigma2;
  private  double LIPvissigma3;
  private  double LIPvissigma4;
  private  double LIPmemsigma1;
  private  double LIPmemsigma2;
  private  double LIPmemsigma3;
  private  double LIPmemsigma4;

    // private
    NslDouble2 lipvis ; /*(array_size,array_size)   */
    NslDouble2 lipmem ; /* (array_size,array_size) */

    // environment or hierarchical variables
    NslInt0 FOVEAX ; /*()*/
    NslInt0 FOVEAY ; /*()*/

public  void initModule()
 {
    FOVEAX.set((NslInt0)nslGetValue("crowleyTop.FOVEAX")) /*rule 114 */;
    FOVEAY.set((NslInt0)nslGetValue("crowleyTop.FOVEAX")) /*rule 114 */;
  }

public  void initRun(){
    lipvis.set(0);
    lipmem.set(0);

    LIPvis_out.set(0);
    LIPmem_out.set(0);
    LIPmemK=0.9;

    lipvistm=0.006;
    lipmemtm=0.008;
    LIPvissigma1=0;
    LIPvissigma2=90;
    LIPvissigma3=0;
    LIPvissigma4=90;

    LIPmemsigma1=0;
    LIPmemsigma2=90;
    LIPmemsigma3=0;
    LIPmemsigma4=90;
}

public  void simRun(){
  // System.err.println("@@@@ LIP simRun entered @@@@");
  /* <Q> RETINA? LIPmemK ThLIPmem_in */

/* Note: the order of the following lines is very important */
/* The membrain potentials are calculated first, then the firing rates */

    lipvis.set(system.nsldiff.eval(lipvis,lipvistm,
 __nsltmp102=nslj.src.math.NslAdd.eval(__nsltmp102,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,lipvis.get()),SLIPvis_in.get()))) /* rule 108 */; //RETINA;
    lipmem.set(system.nsldiff.eval(lipmem,lipmemtm,
 __nsltmp106=nslj.src.math.NslAdd.eval(__nsltmp106,
 __nsltmp105=nslj.src.math.NslAdd.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslSub.eval(__nsltmp103,0,lipmem.get()),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,LIPmemK,ThLIPmem_in.get())),LIPvis_out.get()))) /* rule 108 */;

    (lipmem).set(FOVEAX.getint(),FOVEAY.getint(),(LIPvis_out).get(FOVEAX.get(),FOVEAY.get()));                        

    LIPvis_out.set(Nsl2Sigmoid.eval(lipvis,LIPvissigma1,LIPvissigma2,LIPvissigma3,LIPvissigma4)) /* rule 108 */;
    LIPmem_out.set(Nsl2Sigmoid.eval(lipmem,LIPmemsigma1,LIPmemsigma2,LIPmemsigma3,LIPmemsigma4)) /* rule 108 */;
  }


	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	__nsltmp105 = new double[1][1];
	__nsltmp106 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	private  double[][] __nsltmp105;
	private  double[][] __nsltmp106;
	/* constructor and related methods */
	/* nsl declarations */
	int array_size;

	 /*GENERIC CONSTRUCTOR:   */
	 public LIP(String nslName, NslModule nslParent,int array_size) {
		super(nslName, nslParent);
		this.array_size = array_size;
		initSys();
		makeInst(nslName, nslParent,array_size);
	}
	public void makeInst(String nslName, NslModule nslParent,int array_size){ 
	 ThLIPmem_in=new NslDinDouble2 ("ThLIPmem_in",this,array_size,array_size); //NSLDECLS 
	 SLIPvis_in=new NslDinDouble2 ("SLIPvis_in",this,array_size,array_size); //NSLDECLS 
	 LIPvis_out=new NslDoutDouble2 ("LIPvis_out",this,array_size,array_size); //NSLDECLS 
	 LIPmem_out=new NslDoutDouble2 ("LIPmem_out",this,array_size,array_size); //NSLDECLS 
	 lipvis=new NslDouble2 ("lipvis",this,array_size,array_size); //NSLDECLS 
	 lipmem=new NslDouble2 ("lipmem",this,array_size,array_size); //NSLDECLS 
	 FOVEAX=new NslInt0 ("FOVEAX",this); //NSLDECLS 
	 FOVEAY=new NslInt0 ("FOVEAY",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
