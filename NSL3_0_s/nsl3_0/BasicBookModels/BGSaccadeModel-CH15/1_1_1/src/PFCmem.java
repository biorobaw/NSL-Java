/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)PFCmem.mod	1.8 --- 08/05/99 -- 13:56:32 : jversion  @(#)PFCmem.mod	1.2---04/23/99--18:39:39 */


 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

//
// PFCmem
//
 public class PFCmem extends NslModule/*(int array_size)*/{
    // input ports
    public NslDinDouble2 ThPFCmem_in ; /*()   */
    public NslDinDouble2 LIPmem_in ; /*()   */
    public NslDinDouble2 pfcseq_in ; /*()   */

    // output ports
    public NslDoutDouble2 PFCmem_out ; /*(array_size,array_size)   */


  // private variables

   private NslDouble2 pfcmem ; /*(array_size,array_size)   */
   private  double  pfcmemtm;
   private  double  pfcmemK1;
   private  double  pfcmemK2;
   private  double  pfcseqK;
   private  double  PFCmemsigma1;
   private  double  PFCmemsigma2;
   private  double  PFCmemsigma3;
   private  double  PFCmemsigma4;



public  void initRun(){
    PFCmem_out.set(0.0);
    pfcmem.set(0.0);

    pfcmemtm = 0.008;
    pfcmemK1 = 1.5;
    pfcmemK2 = 0.5;
    pfcseqK = 2.0;
    PFCmemsigma1 = 0.0;
    PFCmemsigma2 = 180.0;
    PFCmemsigma3 = 0.0;
    PFCmemsigma4 = 90.0;
}

public  void simRun(){
	//ThPFCmem_in = pfcmemK1* ThPFCmem_in;

  // System.err.println("@@@@ PFCmem simRun entered @@@@");
    pfcmem.set(system.nsldiff.eval(pfcmem,pfcmemtm,
 __nsltmp108=nslj.src.math.NslAdd.eval(__nsltmp108,
 __nsltmp105=nslj.src.math.NslAdd.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslAdd.eval(__nsltmp103,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,pfcmem.get()),
 __nsltmp102=nslj.src.math.NslElemMult.eval(__nsltmp102,pfcmemK1,ThPFCmem_in.get())),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,pfcmemK2,LIPmem_in.get())),
 __nsltmp107=nslj.src.math.NslElemMult.eval(__nsltmp107,
 __nsltmp106=nslj.src.math.NslElemMult.eval(__nsltmp106,pfcseqK,pfcseq_in.get()),LIPmem_in.get())))) /* rule 108 */;
   
    (pfcmem).set(4,4,0.0);
    PFCmem_out.set(Nsl2Sigmoid.eval(pfcmem,PFCmemsigma1,PFCmemsigma2,PFCmemsigma3,PFCmemsigma4)) /* rule 108 */;
  }

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	__nsltmp105 = new double[1][1];
	__nsltmp106 = new double[1][1];
	__nsltmp107 = new double[1][1];
	__nsltmp108 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		for (int j = 0; j < __nsltmp107[0].length; j++) {
			__nsltmp107[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp108.length; i++) {
		for (int j = 0; j < __nsltmp108[0].length; j++) {
			__nsltmp108[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	private  double[][] __nsltmp105;
	private  double[][] __nsltmp106;
	private  double[][] __nsltmp107;
	private  double[][] __nsltmp108;
	/* constructor and related methods */
	/* nsl declarations */
	int array_size;

	 /*GENERIC CONSTRUCTOR:   */
	 public PFCmem(String nslName, NslModule nslParent,int array_size) {
		super(nslName, nslParent);
		this.array_size = array_size;
		initSys();
		makeInst(nslName, nslParent,array_size);
	}
	public void makeInst(String nslName, NslModule nslParent,int array_size){ 
	 ThPFCmem_in=new NslDinDouble2 ("ThPFCmem_in",this); //NSLDECLS 
	 LIPmem_in=new NslDinDouble2 ("LIPmem_in",this); //NSLDECLS 
	 pfcseq_in=new NslDinDouble2 ("pfcseq_in",this); //NSLDECLS 
	 PFCmem_out=new NslDoutDouble2 ("PFCmem_out",this,array_size,array_size); //NSLDECLS 
	 pfcmem=new NslDouble2 ("pfcmem",this,array_size,array_size); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
