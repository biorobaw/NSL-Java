/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)CDlattan.mod	1.8 --- 08/05/99 -- 13:56:07 : jversion  @(#)CDlattan.mod	1.2---04/23/99--18:39:20 */
/* $Log: CDlattan.mod,v $
 * Revision 1.1  1998/02/02 22:34:33  erhan
 * crowley3.0.d added
 *
 * Revision 1.2  1998/01/30 19:59:54  erhan
 * ver 5
 * */
/* nocomments=true */
// Import statements
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

// Leaf nodes

//
// CDlattan
//
/**
 * CDlattan class
 * Represents the Caudate Tonically Active Cells Layer
 * @see     CDlattan
 * @version 0.1 96/11/19
 * @author  Michael Crowley
 * @var private CDlatinh_in - input coming from CDlatinh module (of type NslDouble2)<p>
 * @var private SNCdop_in - input coming from SNC module (of type NslDouble2)<p>
 * @var private CDlattan_out - output going to CDlatburst module (of type NslDouble2)<p>
 */
 public class CDlattan extends NslModule/*(int CorticalArraySize)*/
  
{
//inputs
 public NslDinDouble2 SNCdop_in ; /*(CorticalArraySize,CorticalArraySize)*/
 public NslDinDouble2 CDlatinh_in ; /*(CorticalArraySize,CorticalArraySize)*/
//outputs
 public NslDoutDouble2 CDlattan_out ; /*(CorticalArraySize,CorticalArraySize)*/

  // private variables
  private  double cdlattantm;
  private  double cdlattanTONIC;
  private  double CDSNCdopK;
  private  double CDltsigma1;
  private  double CDltsigma2;
  private  double CDltsigma3;
  private  double CDltsigma4;


 NslDouble2 cdlattan ; /*     (CorticalArraySize,CorticalArraySize)*/


public  void initRun () {
    cdlattantm = 0.01;
    cdlattanTONIC = 10;
    CDSNCdopK = 0.5;
    CDltsigma1 = 0;
    CDltsigma2 = 10;
    CDltsigma3 = 0;
    CDltsigma4 = 10;
  }
public  void simRun () {
  // System.err.println("@@@@ CDlattan simRun entered @@@@");
    cdlattan.set(system.nsldiff.eval(cdlattan,cdlattantm,
 __nsltmp105=nslj.src.math.NslSub.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslSub.eval(__nsltmp103,
 __nsltmp102=nslj.src.math.NslAdd.eval(__nsltmp102,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,cdlattan.get()),cdlattanTONIC),CDlatinh_in.get()),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,CDSNCdopK,SNCdop_in.get())))) /* rule 108 */;
    CDlattan_out.set(Nsl2Sigmoid.eval(cdlattan,CDltsigma1,CDltsigma2,CDltsigma3,CDltsigma4)) /* rule 108 */;
}


	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	__nsltmp105 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	private  double[][] __nsltmp105;
	/* constructor and related methods */
	/* nsl declarations */
	int CorticalArraySize;

	 /*GENERIC CONSTRUCTOR:   */
	 public CDlattan(String nslName, NslModule nslParent,int CorticalArraySize) {
		super(nslName, nslParent);
		this.CorticalArraySize = CorticalArraySize;
		initSys();
		makeInst(nslName, nslParent,CorticalArraySize);
	}
	public void makeInst(String nslName, NslModule nslParent,int CorticalArraySize){ 
	 SNCdop_in=new NslDinDouble2 ("SNCdop_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 CDlatinh_in=new NslDinDouble2 ("CDlatinh_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 CDlattan_out=new NslDoutDouble2 ("CDlattan_out",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 cdlattan=new NslDouble2 ("cdlattan",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}  //end class
