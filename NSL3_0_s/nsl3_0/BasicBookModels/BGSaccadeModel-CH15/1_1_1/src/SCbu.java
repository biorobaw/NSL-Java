/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)SCbu.mod	1.8 --- 08/05/99 -- 13:56:35 : jversion  @(#)SCbu.mod	1.2---04/23/99--18:39:46 */
// --------------------------------- SCbu layer ------------------------------

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

//LNK_SC4
/**
* Here is the class representing the superior colliculus build up neurons.
* This layer is called as SCbu.
* This way the 3 modules SCsac, SCqv, SCbu are homogenously composed of
*.nslDifferential equations defining their function see SCtemp
*/

 public class SCbu extends NslModule /*(int array_size)*/ {
	// input ports
 public NslDinDouble2 PFCfovea_in ; /* (array_size,array_size)*/
 public NslDinDouble2 SCsac_in ; /*(array_size,array_size)*/
 public NslDinDouble1 BSGEyeMovement_in ; /*(array_size)*/
 public NslDinDouble0 BSGsaccade_in ; /*()*/
	// output ports
 public NslDoutDouble2 SCbu_out ; /*(array_size,array_size)*/
 //fovea = out(new NslDouble0());

private   double SCbusigma1;
private   double SCbusigma2;
private   double SCbusigma3;
private   double SCbusigma4;
private  double scbutm;
private static final  int NINE = 9;
private static final  int CENTERX = 4;
private static final  int CENTERY = 4;
private  Target SCBUTarget;  
private  double SCBUsaccade;
private  double SCBUMaxFire;

private NslDouble2 scbu ; /* (array_size,array_size)  */
private NslDouble2 SCBUtemp ; /* (array_size,array_size)   */

    private NslInt0 FOVEAX ; /*()*/
    private NslInt0 FOVEAY ; /*()*/

public  void initModule()
{
    FOVEAX.set((NslInt0)nslGetValue("crowleyTop.FOVEAX")) /*rule 114 */;
    FOVEAY.set((NslInt0)nslGetValue("crowleyTop.FOVEAY")) /*rule 114 */;  
}

public  void initRun(){

  SCbu_out.set(0);
  SCbusigma1 = 0;
  SCbusigma2 =90;
  SCbusigma3 = 0;
  //LNK_SC4_1
  SCbusigma4 =90;
  scbu.set(0);   
  scbutm =   0.006;
  //fovea = SCbu_out[CENTERX][CENTERY];
  SCBUsaccade = 0;
  SCBUMaxFire = 90;
}

public  void simRun(){
// 96/12/20 aa - put SCBUtemp calculations here since in the original
// C++ code, it appears that SCbu_out may be sequentially dependent on
// SCBUtemp

  // System.err.println("@@@@ SCbu simRun entered @@@@");

        if ( 
 nslj.src.math.NslNeq.eval(BSGsaccade_in.get(),0.0))  //Performing, or starting, a saccade
        {
           if ( SCBUsaccade == 0 )
            {
               SCBUsaccade = 1;     // Indicates occurrence of a saccade.
//              Get target locations for target remapping of SC buildup
//              neurons
                SCBUTarget=SC.MakeTargets(SCsac_in)/* rule 102*/;
            }
//          Assume some kind of signal from BSG that tells the buildup
//          cells how far the eyes have moved, i.e., efference copy.
            if ( SCBUTarget != null )
            {
                SCBUTarget.Move( BSGEyeMovement_in );
//              Update the activation of the buildup neurons
		//                SCBUtemp = MoveEye( SCBUTarget, SCbu_out ) * SCBUMaxFire;
		// 96/12/20 aa put back as C++
                SCBUtemp.set(SC.MoveEye(SCBUTarget,SCbu_out)) /* rule 108 */; 
		  SCBUtemp.set(
 __nsltmp101=nslj.src.math.NslElemMult.eval(__nsltmp101,SCBUtemp.get(),SCBUMaxFire));
            }
        }
        else {
//          No saccade or saccade just finished.
            SCBUsaccade     = 0;
//          When there is no corollary feedback from the BSG, the buildup
//          neurons should gradually decay to a zero state as long as
//          there is no fixation activity from PFC.
	    //            SCBUtemp = 0;
            SCBUtemp.set(0);
          }

  scbu.set(system.nsldiff.eval(scbu,scbutm,
 __nsltmp104=nslj.src.math.NslAdd.eval(__nsltmp104,
 __nsltmp103=nslj.src.math.NslAdd.eval(__nsltmp103,
 __nsltmp102=nslj.src.math.NslSub.eval(__nsltmp102,0,scbu.get()),SCBUtemp.get()),PFCfovea_in.get()))) /* rule 108 */;
  SCbu_out.set(Nsl2Sigmoid.eval(scbu,SCbusigma1,SCbusigma2,SCbusigma3,SCbusigma4)) /* rule 108 */;
  //fovea = SCbu_out[CENTERX][CENTERY];

//System.out.println("scbu: " + scbu);
//System.out.println("PFCfovea_in: " + PFCfovea_in);

//System.out.println("SCBUtemp: " + SCBUtemp);

}

  //  public double fovea() { return SCbu_out.get(CENTERX, CENTERY);}
					      

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	/* constructor and related methods */
	/* nsl declarations */
	int array_size;

	 /*GENERIC CONSTRUCTOR:   */
	 public SCbu(String nslName, NslModule nslParent,int array_size) {
		super(nslName, nslParent);
		this.array_size = array_size;
		initSys();
		makeInst(nslName, nslParent,array_size);
	}
	public void makeInst(String nslName, NslModule nslParent,int array_size){ 
	 PFCfovea_in=new NslDinDouble2 ("PFCfovea_in",this,array_size,array_size); //NSLDECLS 
	 SCsac_in=new NslDinDouble2 ("SCsac_in",this,array_size,array_size); //NSLDECLS 
	 BSGEyeMovement_in=new NslDinDouble1 ("BSGEyeMovement_in",this,array_size); //NSLDECLS 
	 BSGsaccade_in=new NslDinDouble0 ("BSGsaccade_in",this); //NSLDECLS 
	 SCbu_out=new NslDoutDouble2 ("SCbu_out",this,array_size,array_size); //NSLDECLS 
	 scbu=new NslDouble2 ("scbu",this,array_size,array_size); //NSLDECLS 
	 SCBUtemp=new NslDouble2 ("SCBUtemp",this,array_size,array_size); //NSLDECLS 
	 FOVEAX=new NslInt0 ("FOVEAX",this); //NSLDECLS 
	 FOVEAY=new NslInt0 ("FOVEAY",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
