/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)Thal.mod	1.8 --- 08/05/99 -- 13:56:47 : jversion  @(#)Thal.mod	1.2---04/23/99--18:33:17 */

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

//Submodule: Thalamus
//membranes
//
//ThPFCmem
//

 public class Thal extends NslModule/*(int array_size)*/ {
//inputs
    	public NslDinDouble2 SNRmedburst_in ; /*(array_size,array_size)   */
    	public NslDinDouble2 PFCmem_in ; /*(array_size,array_size)   */
    	public NslDinDouble2 FEFmem_in ; /*(array_size,array_size)   */
    	public NslDinDouble2 LIPmem_in ; /*(array_size,array_size)   */
//outputs
	public NslDoutDouble2 ThPFCmem_out ; /*(array_size,array_size)   */
	public NslDoutDouble2 ThFEFmem_out ; /*(array_size,array_size)   */
	public NslDoutDouble2 ThLIPmem_out ; /*(array_size,array_size)   */
	public NslDoutDouble2 ThMEDlcn_out ; /*(array_size,array_size)   */
	public NslDoutDouble2 RNMEDinh_out ; /*(array_size,array_size)   */

//private variables
static  private  int    THBurstRate=60;
static  private  int    THBurstLevel=15;
static  private  double DecayRate   = 0.9;

    // module instances
private	ThPFCmem thpfc ; /*(array_size)  */
private	ThFEFmem thfef ; /*(array_size)   */	
private	ThLIPmem thlip ; /*(array_size)   */
private	ThMEDlcn thmed ; /*(array_size)   */
private	RNMEDinh rnmed ; /*(array_size)   */
private        NslDouble2 THNewActivation ; /* (array_size,array_size)*/

public  void makeConn(){
    // inputs
    	nslConnect(SNRmedburst_in,thpfc.SNRmedburst_in);
    	nslConnect(SNRmedburst_in,thfef.SNRmedburst_in);
    	nslConnect(SNRmedburst_in,thlip.SNRmedburst_in);
    	nslConnect(SNRmedburst_in,rnmed.SNRmedburst_in);
    	nslConnect(PFCmem_in,thpfc.PFCmem_in);
    	nslConnect(FEFmem_in,thfef.FEFmem_in);
    	nslConnect(LIPmem_in,thlip.LIPmem_in);

	// privates
	nslConnect(thmed.ThMEDlcn_out,thpfc.ThMEDlcn_in); 
	nslConnect(thmed.ThMEDlcn_out,thfef.ThMEDlcn_in); 
	nslConnect(thmed.ThMEDlcn_out,thlip.ThMEDlcn_in); 
	nslConnect(rnmed.RNMEDinh_out,thmed.RNMEDinh_in); 

        // outputs
	nslConnect(thpfc.ThPFCmem_out,ThPFCmem_out);
	nslConnect(thfef.ThFEFmem_out,ThFEFmem_out);
	nslConnect(thlip.ThLIPmem_out,ThLIPmem_out);
	nslConnect(thmed.ThMEDlcn_out,ThMEDlcn_out);
	nslConnect(rnmed.RNMEDinh_out,RNMEDinh_out);
  }

  public  void initRun(){
    THNewActivation.set(0);
  }

  public  void simRun(){
    //    THNewActivation = THCheckBurst(SNRmedburst);
    // System.err.println("@@@@ Thal simRun entered @@@@");
     THCheckBurst(THNewActivation, SNRmedburst_in);
  }

  /**
    Uses  bursting constant to casue activation in neuorns
    undergoing remapping. This is indicated by a decrease in 
    inhibition below a certain threshold.
    */

public   void  THCheckBurst(NslDouble2 THNewActivation, NslDouble2 SNRmedburst_in) {
     double[][] inmat = SNRmedburst_in.get();
     double[][] outmat = THNewActivation.get();
     int size1 = inmat.length;
     int size2 = inmat[0].length;

    if(size1!=outmat.length || size2!=outmat[0].length) {
      System.err.println("THCheckBurst: array size not match\n"+
			 "THNewActivation ("+size1+"x"+size2+
			 ") SNRmedburst_in ("+inmat.length+"x"+
			 inmat[0].length+")");
    }
    for ( int i=0; i<size1; i++) {
      for( int j=0; j<size2; j++) {
	if (inmat[i][j]<THBurstLevel)
	  outmat[i][j]=THBurstRate;
	else 
          outmat[i][j]=outmat[i][j]*DecayRate;
      }
    }

  }
	
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	/* constructor and related methods */
	/* nsl declarations */
	int array_size;

	 /*GENERIC CONSTRUCTOR:   */
	 public Thal(String nslName, NslModule nslParent,int array_size) {
		super(nslName, nslParent);
		this.array_size = array_size;
		initSys();
		makeInst(nslName, nslParent,array_size);
	}
	public void makeInst(String nslName, NslModule nslParent,int array_size){ 
	 SNRmedburst_in=new NslDinDouble2 ("SNRmedburst_in",this,array_size,array_size); //NSLDECLS 
	 PFCmem_in=new NslDinDouble2 ("PFCmem_in",this,array_size,array_size); //NSLDECLS 
	 FEFmem_in=new NslDinDouble2 ("FEFmem_in",this,array_size,array_size); //NSLDECLS 
	 LIPmem_in=new NslDinDouble2 ("LIPmem_in",this,array_size,array_size); //NSLDECLS 
	 ThPFCmem_out=new NslDoutDouble2 ("ThPFCmem_out",this,array_size,array_size); //NSLDECLS 
	 ThFEFmem_out=new NslDoutDouble2 ("ThFEFmem_out",this,array_size,array_size); //NSLDECLS 
	 ThLIPmem_out=new NslDoutDouble2 ("ThLIPmem_out",this,array_size,array_size); //NSLDECLS 
	 ThMEDlcn_out=new NslDoutDouble2 ("ThMEDlcn_out",this,array_size,array_size); //NSLDECLS 
	 RNMEDinh_out=new NslDoutDouble2 ("RNMEDinh_out",this,array_size,array_size); //NSLDECLS 
	 thpfc=new ThPFCmem ("thpfc",this,array_size); //NSLDECLS 
	 thfef=new ThFEFmem ("thfef",this,array_size); //NSLDECLS 
	 thlip=new ThLIPmem ("thlip",this,array_size); //NSLDECLS 
	 thmed=new ThMEDlcn ("thmed",this,array_size); //NSLDECLS 
	 rnmed=new RNMEDinh ("rnmed",this,array_size); //NSLDECLS 
	 THNewActivation=new NslDouble2 ("THNewActivation",this,array_size,array_size); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
