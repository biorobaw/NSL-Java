/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)SNRmedburst.mod	1.8 --- 08/05/99 -- 13:56:38 : jversion  @(#)SNRmedburst.mod	1.2---04/23/99--18:39:49 */

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

// Global variables used in this module
//
// NslInt2 SNRxmap []; 
// NslInt2 SNRymap []; 
// NslDouble2 SNRweights [];
// NslInt2 SNRMapCount;
//

//
// SNRmedburst
//
/**
 * SNRmedburst class
 * Represents the Substantia Nigra pars Reticulata Burst Cells Layer
 * @see     SNRmedburst
 * @version 0.1 96/11/19
 * @author  Michael Crowley
 * -var private CDdirmedburst_in - input coming from 
 CDmedburst module (of type NslDouble2)<p>
 * -var private STNmedburst_in - input coming from 
 STNmedburst module (of type NslDouble2)<p>
 * -var private SNRmedburst_out - output going to 
 Thal module (of type NslDouble2)<p>
 */
 public class SNRmedburst extends NslModule /*(int CorticalArraySize,int StriatalArraySize)*/ {

  //input ports
  public NslDinInt2 SNRMapCount_bulk ; /*(CorticalArraySize,CorticalArraySize)*/
  public NslDinDouble3 SNRweights_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/
  public NslDinInt3 SNRxmap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/
  public NslDinInt3 SNRymap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/
   NslDinDouble2 STNmedburst_in ; /*(CorticalArraySize,CorticalArraySize)*/
   NslDinDouble2 CDdirmedburst_in ; /* (StriatalArraySize,StriatalArraySize)*/

  // output ports
   NslDoutDouble2 SNRmedburst_out ; /* (CorticalArraySize,CorticalArraySize)*/

  //privates
 
  private  double snrmedbursttm;
  private  double SNRmedburstTONIC;
  private  double SNRcdlbK;
  private  double SNRstnlbK;
  private  double SNRlbsigma1;
  private  double SNRlbsigma2;
  private  double SNRlbsigma3;
  private  double SNRlbsigma4;

  private  int[][][] SNRxmap;
  private  int[][][] SNRymap;
  private  double[][][] SNRweights ;
  private  int[][] SNRMapCount;


  //NslInt2 SNRMapCount;
   NslDouble2 snrmedburst ; /* (CorticalArraySize,CorticalArraySize)*/
   NslDouble2 SNRcdinput ; /*(9,9) */


public  void initModule()  {
/* used when we did not have ports
    SNRxmap_bulk = nslRefParent ("SNRxmap_bulk")   ;
    SNRymap_bulk = nslRefParent ("SNRymap_bulk")  ;
    SNRweights_bulk = nslRefParent ("SNRweights_bulk")   ;
    SNRMapCount_bulk=nslRefParent("SNRMapCount_bulk") ;
*/
    SNRxmap=(int[][][])SNRxmap_bulk.get()/* rule 112 */;
    SNRymap=(int[][][])SNRymap_bulk.get()/* rule 112 */; 
    SNRweights=(double[][][])SNRweights_bulk.get()/* rule 112 */;
    SNRMapCount=(int[][])SNRMapCount_bulk.get()/* rule 112 */;

}

  // This function is also called in the lib.h module by:
  // TestConnections, TestFoveaMapping

public  void initRun () {
    snrmedbursttm = 0.01;
    SNRmedburstTONIC = 30;
    SNRcdlbK = 1;
    SNRstnlbK = 0.5;
    SNRlbsigma1 = 15;
    SNRlbsigma2 = 60;
    SNRlbsigma3 = 0;
    SNRlbsigma4 = 60;
    snrmedburst.set(30);
    SNRmedburst_out.set(Nsl2Sigmoid.eval(snrmedburst,SNRlbsigma1,SNRlbsigma2,SNRlbsigma3,SNRlbsigma4)) /* rule 108 */;

  }
  public  void simRun () {
     int tempint;
    /* <Q> SNRcdinput? */
  // System.err.println("@@@@ SNRmedburst simRun entered @@@@");

    tempint=SumCDtoSNR(CDdirmedburst_in,SNRcdinput)/* rule 102*/;
//    System.out.println("CD.max "+CDdirmedburst_in.max() + "\nSNR "+SNRcdinput);
    snrmedburst.set(system.nsldiff.eval(snrmedburst,snrmedbursttm,
 __nsltmp106=nslj.src.math.NslAdd.eval(__nsltmp106,
 __nsltmp104=nslj.src.math.NslSub.eval(__nsltmp104,
 __nsltmp102=nslj.src.math.NslAdd.eval(__nsltmp102,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,snrmedburst.get()),SNRmedburstTONIC),
 __nsltmp103=nslj.src.math.NslElemMult.eval(__nsltmp103,SNRcdlbK,SNRcdinput.get())),
 __nsltmp105=nslj.src.math.NslElemMult.eval(__nsltmp105,SNRstnlbK,STNmedburst_in.get())))) /* rule 108 */;
    SNRmedburst_out.set(Nsl2Sigmoid.eval(snrmedburst,SNRlbsigma1,SNRlbsigma2,SNRlbsigma3,SNRlbsigma4)) /* rule 108 */;
//System.out.println("CDdirmedburst "+CDdirmedburst_in);
//System.out.println("SNRcdinput "+SNRcdinput);
 }


public  int SumCDtoSNR (NslDouble2 CD, NslDouble2 SNR) 
  {
  //  This function sums the activity in the medial CD circuit onto 
  //  the medial SNR circuit through SNRweights, SNRxmap and SNRymap.

     int i, j, k, xmaploc, ymaploc;

/* verbatim NSLJ */
    if (CD==null) System.err.println("CD null!!!!");
    if (SNR==null) System.err.println("SNR null!!!!");
 /* verbatim off */
     // System.err.println("SNRmedburst.SumCDtoSNR: entered....");
    SNR.set(0);  // Ensure new mapping only
     // System.err.println("SNRmedburst.SumCDtoSNR: A");
     //System.err.println("SNRMapCount:"+SNRMapCount);
    for (i = 0; i < CorticalArraySize; i ++)
      for (j = 0; j < CorticalArraySize; j ++) {
        for (k = 0; k < SNRMapCount [i][j]; k ++) {
    //System.err.println("SNRmedburst.SumCDtoSNR: loop: ("+i+","+j+","+k+")");
          xmaploc = SNRxmap [i][j][k];
          ymaploc = SNRymap [i][j][k];
          (SNR).set(i,j,((SNR).get(i,j))+(((CD).get(xmaploc,ymaploc))*((((SNRweights)[i])[j])[k])));
        }
      }
    return 0;
}

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	__nsltmp105 = new double[1][1];
	__nsltmp106 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	private  double[][] __nsltmp105;
	private  double[][] __nsltmp106;
	/* constructor and related methods */
	/* nsl declarations */
	int CorticalArraySize;
	int StriatalArraySize;

	 /*GENERIC CONSTRUCTOR:   */
	 public SNRmedburst(String nslName, NslModule nslParent,int CorticalArraySize, int StriatalArraySize) {
		super(nslName, nslParent);
		this.CorticalArraySize = CorticalArraySize;
		this.StriatalArraySize = StriatalArraySize;
		initSys();
		makeInst(nslName, nslParent,CorticalArraySize, StriatalArraySize);
	}
	public void makeInst(String nslName, NslModule nslParent,int CorticalArraySize,int StriatalArraySize){ 
	 SNRMapCount_bulk=new NslDinInt2 ("SNRMapCount_bulk",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNRweights_bulk=new NslDinDouble3 ("SNRweights_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNRxmap_bulk=new NslDinInt3 ("SNRxmap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNRymap_bulk=new NslDinInt3 ("SNRymap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 STNmedburst_in=new NslDinDouble2 ("STNmedburst_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 CDdirmedburst_in=new NslDinDouble2 ("CDdirmedburst_in",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 SNRmedburst_out=new NslDoutDouble2 ("SNRmedburst_out",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 snrmedburst=new NslDouble2 ("snrmedburst",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNRcdinput=new NslDouble2 ("SNRcdinput",this,9,9); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
