/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W%---%G%--%U% */
/* old kversion @(#)CDmedburst.mod	1.8 --- 08/05/99 -- 13:56:08 : jversion  @(#)CDmedburst.mod	1.2---04/23/99--18:39:21 */

// Import statements
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

// Global variables used in this module via enableAccess in Med.mod
//
// NslInt2 FEFxmap [];
// NslInt2 FEFymap [];
// NslInt2 LIPxmap [];
// NslInt2 LIPymap [];
// NslInt2 PFCxmap [];
// NslInt2 PFCymap [];
//


//
// CDmedburst
//
/*
        Dopamine is modelled as an inhibitory effect on the indirect
        pathway projecting through GPe and STN and as an excitatory
        effect on the direct pathway projecting to GPi/SNr.
*/

/*
        Also, assume that the effect of dopamine on the projection neurons in 
        the caudate is to manipulate the time constant of the neurons.  More
        dopamine shortens the time constant of the neurons and less dopamine
        increases the time constant.  This makes the CD more or less responsive
        the inputs from the cortex.
*/

/**
 * CDmedburst class
 * Represents the Caudate Burst Cells Layer
 * @see     CDmedburst
 * @version 0.1 96/11/19
 * @author  Michael Crowley
 * -var public FEFsac_in - input coming from FEF module (of type NslDouble2)<p>
 * -var public LIPmem_in - input coming from LIP module (of type NslDouble2)<p>
 * -var public SNCdop_in - input coming from SNC module (of type NslDouble2)<p>
 * -var public PFCgo_in - input coming from PFC module (of type NslDouble2)<p>
 * -var public CDmedtan_in - input coming from CDmedtan module (of type NslDouble2)<p>
 * -var public CDindmedburst_out - output going to GPEmedburst module (of type NslDouble2)<p>
 * -var public CDdirmedburst_out - output going to SNRmedburst module (of type NslDouble2)<p>
 */

public class CDmedburst/*(int CorticalArraySize,int StriatalArraySize)*/  extends Func/*(CorticalArraySize)*/ {
	public NslDinDouble2 PFCgo_in ; /*(CorticalArraySize,CorticalArraySize)*/ 
 	public NslDinDouble2 FEFsac_in ; /*(CorticalArraySize,CorticalArraySize)*/ 
	public NslDinDouble2 LIPmem_in ; /*(CorticalArraySize,CorticalArraySize)*/
	
 	public NslDinDouble2 SNCdop_in ; /*(StriatalArraySize,StriatalArraySize)*/ 

	public NslDinDouble2 CDmedtan_in ; /*(StriatalArraySize,StriatalArraySize)*/ 


     public NslDinInt2 SNRMapCount_bulk ; /*(CorticalArraySize,CorticalArraySize)*/ 

     public NslDinInt3 FEFxmap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinInt3 FEFymap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinInt3 LIPxmap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinInt3 LIPymap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinInt3 PFCxmap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinInt3 PFCymap_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 
     public NslDinDouble3 SNRweights_bulk ; /*(CorticalArraySize,CorticalArraySize,CorticalArraySize)*/ 

   // output ports
 public NslDoutDouble2 CDindmedburst_out ; /* (CorticalArraySize,CorticalArraySize)*/
			
 public NslDoutDouble2 CDdirmedburst_out ; /* (StriatalArraySize,StriatalArraySize)*/

//variables

     private NslDouble0 LearnRate ; /*()*/ 

 private NslDouble2 cdindmedburst ; /* (CorticalArraySize,CorticalArraySize)*/ 
 private NslDouble2 cddirmedburst ; /* (StriatalArraySize,StriatalArraySize)*/
 private NslDouble2 SNCdopmed ; /* (StriatalArraySize,StriatalArraySize)*/
 private NslDouble2 CDfefinput ; /*(StriatalArraySize,StriatalArraySize)*/
 private NslDouble2 CDlipinput ; /*(StriatalArraySize,StriatalArraySize)*/
 private NslDouble2 CDpfcinput ; /*(StriatalArraySize,StriatalArraySize)*/

  // private variables
  private  double SNCdopmax;
  private  double CorticalSlowDown;
  private  double basecdmedbursttm;
  private  double cdmedbursttm;
  private  double CDfefinputK;
  private  double CDlipinputK;
  private  double CDpfcinputK;
  private  double CDmedtanK;
  private  double CDmedsncK;
  private  double CDmedfefsacK;
  private  double CDmedpfcgoK;
  private  double CDmbsigma1;
  private  double CDmbsigma2;
  private  double CDmbsigma3;
  private  double CDmbsigma4;

   int FEFxmap[][][];
   int FEFymap[][][];
   int LIPxmap[][][];
   int LIPymap[][][];
   int PFCxmap[][][];
   int PFCymap[][][];  
   double SNRweights[][][];
   int SNRMapCount[][];

public  void initSys() {
	System.err.println("CDmedburst:initSys");
}
public  void initModule() {

LearnRate.set((NslDouble0)nslGetValue("crowleyTop.med.LearnRate")) /*rule 114 */;
/* now using ports instead
FEFxmap_bulk = nslRefParent("FEFxmap_bulk");
FEFymap_bulk = nslRefParent("FEFymap_bulk");
LIPxmap_bulk = nslRefParent("LIPxmap_bulk");
LIPymap_bulk = nslRefParent("LIPymap_bulk");
PFCxmap_bulk = nslRefParent("PFCxmap_bulk");
PFCymap_bulk = nslRefParent("PFCymap_bulk");
SNRweights_bulk  = nslRefParent("SNRweights_bulk");
SNRMapCount_bulk = nslRefParent("SNRMapCount_bulk");
*/

    FEFxmap = (int[][][])FEFxmap_bulk.get();
    FEFymap = (int[][][])FEFymap_bulk.get();
    LIPxmap = (int[][][])LIPxmap_bulk.get();
    LIPymap = (int[][][])LIPymap_bulk.get();
    PFCxmap = (int[][][])PFCxmap_bulk.get();
    PFCymap = (int[][][])PFCymap_bulk.get();
    SNRweights = (double[][][])SNRweights_bulk.get();
    SNRMapCount = (int[][])SNRMapCount_bulk.get();
}

public  void initRun () {

 CDindmedburst_out.set(0);
			
 CDdirmedburst_out.set(0);

    CorticalSlowDown = 1.;
    basecdmedbursttm = 0.01;
    cdmedbursttm = basecdmedbursttm * CorticalSlowDown;
    CDfefinputK = 1.0;
    CDlipinputK = 1.0;
    CDpfcinputK = 1.0;
    CDmedtanK = 2;
    CDmedsncK = 1;
    CDmedfefsacK = 0.35;
    CDmedpfcgoK = 0.5;
    CDmbsigma1 = 25;
    CDmbsigma2 = 90;
    CDmbsigma3 = 0;
    CDmbsigma4 = 60;

  }
public  void simRun () {
     int tempint;
  // System.err.println("@@@@ CDmedburst simRun entered @@@@");

    SNCdopmax=NslMaxValue.eval(SNCdop_in)/* rule 102*/;
    SNCdopmed.set(SNCdopmax);
    /* <Q> where do FEFsac_in, LIPmem_in come from? */

    //System.err.println("===== CDmedburst[1] Calling SetCD");
    tempint=SetCD(CDfefinput,FEFxmap,FEFymap,FEFsac_in)/* rule 102*/;
//    tempint = SetCD (CDlipinput, LIPxmap, LIPymap, LIPmem_in);
    //System.err.println("===== CDmedburst[2] Calling SetCD");
    tempint=SetCD(CDlipinput,LIPxmap,LIPymap,LIPmem_in)/* rule 102*/;
//nslprintln("\tCDlip "+nslMax(CDlipinput));
    //System.err.println("===== CDmedburst[3] Calling SetCD");
     tempint=SetCD(CDpfcinput,PFCxmap,PFCymap,PFCgo_in)/* rule 102*/;

    cdindmedburst.set(system.nsldiff.eval(cdindmedburst,cdmedbursttm,
 __nsltmp106=nslj.src.math.NslAdd.eval(__nsltmp106,
 __nsltmp105=nslj.src.math.NslSub.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslAdd.eval(__nsltmp103,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,cdindmedburst.get()),
 __nsltmp102=nslj.src.math.NslElemMult.eval(__nsltmp102,CDmedfefsacK,LIPmem_in.get())),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,CDmedsncK,SNCdop_in.get())),(CDmedpfcgoK)*(NslMaxValue.eval(PFCgo_in))))) /* rule 108 */;
    CDindmedburst_out.set(Nsl2Sigmoid.eval(cdindmedburst,CDmbsigma1,CDmbsigma2,CDmbsigma3,CDmbsigma4)) /* rule 108 */;

    cddirmedburst.set(system.nsldiff.eval(cddirmedburst,cdmedbursttm,
 __nsltmp117=nslj.src.math.NslAdd.eval(__nsltmp117,
 __nsltmp115=nslj.src.math.NslSub.eval(__nsltmp115,
 __nsltmp113=nslj.src.math.NslAdd.eval(__nsltmp113,
 __nsltmp111=nslj.src.math.NslAdd.eval(__nsltmp111,
 __nsltmp109=nslj.src.math.NslAdd.eval(__nsltmp109,
 __nsltmp107=nslj.src.math.NslSub.eval(__nsltmp107,0,cddirmedburst.get()),
 __nsltmp108=nslj.src.math.NslElemMult.eval(__nsltmp108,CDfefinputK,CDfefinput.get())),
 __nsltmp110=nslj.src.math.NslElemMult.eval(__nsltmp110,CDlipinputK,CDlipinput.get())),
 __nsltmp112=nslj.src.math.NslElemMult.eval(__nsltmp112,CDpfcinputK,CDpfcinput.get())),
 __nsltmp114=nslj.src.math.NslElemMult.eval(__nsltmp114,CDmedtanK,CDmedtan_in.get())),
 __nsltmp116=nslj.src.math.NslElemMult.eval(__nsltmp116,CDmedsncK,SNCdopmed.get())))) /* rule 108 */;

    CDdirmedburst_out.set(Nsl2Sigmoid.eval(cddirmedburst,CDmbsigma1,CDmbsigma2,CDmbsigma3,CDmbsigma4)) /* rule 108 */;
  }

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1][1];
	__nsltmp104 = new double[1][1];
	__nsltmp105 = new double[1][1];
	__nsltmp106 = new double[1][1];
	__nsltmp107 = new double[1][1];
	__nsltmp108 = new double[1][1];
	__nsltmp109 = new double[1][1];
	__nsltmp110 = new double[1][1];
	__nsltmp111 = new double[1][1];
	__nsltmp112 = new double[1][1];
	__nsltmp113 = new double[1][1];
	__nsltmp114 = new double[1][1];
	__nsltmp115 = new double[1][1];
	__nsltmp116 = new double[1][1];
	__nsltmp117 = new double[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		for (int j = 0; j < __nsltmp107[0].length; j++) {
			__nsltmp107[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp108.length; i++) {
		for (int j = 0; j < __nsltmp108[0].length; j++) {
			__nsltmp108[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp109.length; i++) {
		for (int j = 0; j < __nsltmp109[0].length; j++) {
			__nsltmp109[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp110.length; i++) {
		for (int j = 0; j < __nsltmp110[0].length; j++) {
			__nsltmp110[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp111.length; i++) {
		for (int j = 0; j < __nsltmp111[0].length; j++) {
			__nsltmp111[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp112.length; i++) {
		for (int j = 0; j < __nsltmp112[0].length; j++) {
			__nsltmp112[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp113.length; i++) {
		for (int j = 0; j < __nsltmp113[0].length; j++) {
			__nsltmp113[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp114.length; i++) {
		for (int j = 0; j < __nsltmp114[0].length; j++) {
			__nsltmp114[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp115.length; i++) {
		for (int j = 0; j < __nsltmp115[0].length; j++) {
			__nsltmp115[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp116.length; i++) {
		for (int j = 0; j < __nsltmp116[0].length; j++) {
			__nsltmp116[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp117.length; i++) {
		for (int j = 0; j < __nsltmp117[0].length; j++) {
			__nsltmp117[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[][] __nsltmp103;
	private  double[][] __nsltmp104;
	private  double[][] __nsltmp105;
	private  double[][] __nsltmp106;
	private  double[][] __nsltmp107;
	private  double[][] __nsltmp108;
	private  double[][] __nsltmp109;
	private  double[][] __nsltmp110;
	private  double[][] __nsltmp111;
	private  double[][] __nsltmp112;
	private  double[][] __nsltmp113;
	private  double[][] __nsltmp114;
	private  double[][] __nsltmp115;
	private  double[][] __nsltmp116;
	private  double[][] __nsltmp117;
	/* constructor and related methods */
	/* nsl declarations */
	int CorticalArraySize;
	int StriatalArraySize;

	 /*GENERIC CONSTRUCTOR:   */
	 public CDmedburst(String nslName, NslModule nslParent,int CorticalArraySize, int StriatalArraySize) {
		super(nslName, nslParent,CorticalArraySize);
		this.CorticalArraySize = CorticalArraySize;
		this.StriatalArraySize = StriatalArraySize;
		initSys();
		makeInst(nslName, nslParent,CorticalArraySize, StriatalArraySize);
	}
	public void makeInst(String nslName, NslModule nslParent,int CorticalArraySize,int StriatalArraySize){ 
	 PFCgo_in=new NslDinDouble2 ("PFCgo_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 FEFsac_in=new NslDinDouble2 ("FEFsac_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 LIPmem_in=new NslDinDouble2 ("LIPmem_in",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNCdop_in=new NslDinDouble2 ("SNCdop_in",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 CDmedtan_in=new NslDinDouble2 ("CDmedtan_in",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 SNRMapCount_bulk=new NslDinInt2 ("SNRMapCount_bulk",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 FEFxmap_bulk=new NslDinInt3 ("FEFxmap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 FEFymap_bulk=new NslDinInt3 ("FEFymap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 LIPxmap_bulk=new NslDinInt3 ("LIPxmap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 LIPymap_bulk=new NslDinInt3 ("LIPymap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 PFCxmap_bulk=new NslDinInt3 ("PFCxmap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 PFCymap_bulk=new NslDinInt3 ("PFCymap_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 SNRweights_bulk=new NslDinDouble3 ("SNRweights_bulk",this,CorticalArraySize,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 CDindmedburst_out=new NslDoutDouble2 ("CDindmedburst_out",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 CDdirmedburst_out=new NslDoutDouble2 ("CDdirmedburst_out",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 LearnRate=new NslDouble0 ("LearnRate",this); //NSLDECLS 
	 cdindmedburst=new NslDouble2 ("cdindmedburst",this,CorticalArraySize,CorticalArraySize); //NSLDECLS 
	 cddirmedburst=new NslDouble2 ("cddirmedburst",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 SNCdopmed=new NslDouble2 ("SNCdopmed",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 CDfefinput=new NslDouble2 ("CDfefinput",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 CDlipinput=new NslDouble2 ("CDlipinput",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	 CDpfcinput=new NslDouble2 ("CDpfcinput",this,StriatalArraySize,StriatalArraySize); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} //end class
