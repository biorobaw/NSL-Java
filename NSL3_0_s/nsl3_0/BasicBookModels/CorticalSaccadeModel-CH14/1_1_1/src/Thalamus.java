/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */

/*Thalamus
* Thalamus
* @see Thalamus.nslm
* @version 98/6/18
* @author Dominey and Alexander
*
*/

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class Thalamus extends NslModule/*(int stdsz)*/ {

// port inputs
public NslDinFloat2 fefmem ; /*(stdsz,stdsz)*/
public NslDinFloat2 scDelay ; /*(stdsz,stdsz)*/
public NslDinFloat2 snrmem ; /*(stdsz,stdsz)*/
public NslDinFloat2 erasure2 ; /*(stdsz,stdsz)*/
// port outputs
public NslDoutFloat2 thmem ; /*(stdsz,stdsz)*/

// parameters 
private NslFloat0 thmemPot_tm ; /*()*/
private NslFloat0 thmemPot_k1 ; /*()*/
private NslFloat0 thmemPot_k2 ; /*()*/
private NslFloat0 thmemPot_k3 ; /*()*/
private NslFloat0 thmem_x1 ; /*()*/
private NslFloat0 thmem_x2 ; /*()*/
private NslFloat0 thmem_y1 ; /*()*/
private NslFloat0 thmem_y2 ; /*()*/


//vars
private NslFloat2 thmemPot ; /*(stdsz,stdsz)*/
private NslFloat2 erasureConvSCDelay ; /*(stdsz,stdsz)*/
private  int center;

public  void initRun() {
       thmem.set(0);
       thmemPot.set(0);
       erasureConvSCDelay.set(0);

	center = (int)stdsz/2;

	thmemPot_tm.set(.006);
	thmemPot_k1.set(1);	
	thmemPot_k2.set(4);
	thmemPot_k3.set(1);// aa: diff from 98
	thmem_x1.set(0);
	thmem_x2.set(45);
	thmem_y1.set(0);
	thmem_y2.set(10);
}
public  void simRun() {

	erasureConvSCDelay.set(
 __nsltmp101=nslj.src.math.NslConvZero.eval(__nsltmp101,erasure2.get(),scDelay.get()));

	thmemPot.set(system.nsldiff.eval(thmemPot,thmemPot_tm,
 __nsltmp108=nslj.src.math.NslSub.eval(__nsltmp108,
 __nsltmp106=nslj.src.math.NslSub.eval(__nsltmp106,
 __nsltmp104=nslj.src.math.NslAdd.eval(__nsltmp104,
 __nsltmp102=nslj.src.math.NslSub.eval(__nsltmp102,0,thmemPot.get()),
 __nsltmp103=nslj.src.math.NslElemMult.eval(__nsltmp103,thmemPot_k3.get(),fefmem.get())),
 __nsltmp105=nslj.src.math.NslElemMult.eval(__nsltmp105,thmemPot_k1.get(),snrmem.get())),
 __nsltmp107=nslj.src.math.NslElemMult.eval(__nsltmp107,thmemPot_k2.get(),erasureConvSCDelay.get())))) /* rule 108 */;
	(thmemPot).set(center,center,0); // the " - FOVEA" term - so we don't 	 "rememPotber" the fixation point
	thmem.set(NslSigmoid.eval(thmemPot,thmem_x1,thmem_x2,thmem_y1,thmem_y2)) /* rule 108 */;

	if (system.debug>25) {
		System.out.println("Thalamus: simRun: thmem");
		System.out.println(thmem);
	}

}
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new float[1][1];
	__nsltmp102 = new float[1][1];
	__nsltmp103 = new float[1][1];
	__nsltmp104 = new float[1][1];
	__nsltmp105 = new float[1][1];
	__nsltmp106 = new float[1][1];
	__nsltmp107 = new float[1][1];
	__nsltmp108 = new float[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		for (int j = 0; j < __nsltmp107[0].length; j++) {
			__nsltmp107[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp108.length; i++) {
		for (int j = 0; j < __nsltmp108[0].length; j++) {
			__nsltmp108[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  float[][] __nsltmp101;
	private  float[][] __nsltmp102;
	private  float[][] __nsltmp103;
	private  float[][] __nsltmp104;
	private  float[][] __nsltmp105;
	private  float[][] __nsltmp106;
	private  float[][] __nsltmp107;
	private  float[][] __nsltmp108;
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;

	 /*GENERIC CONSTRUCTOR:   */
	 public Thalamus(String nslName, NslModule nslParent,int stdsz) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		initSys();
		makeInst(nslName, nslParent,stdsz);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz){ 
	 fefmem=new NslDinFloat2 ("fefmem",this,stdsz,stdsz); //NSLDECLS 
	 scDelay=new NslDinFloat2 ("scDelay",this,stdsz,stdsz); //NSLDECLS 
	 snrmem=new NslDinFloat2 ("snrmem",this,stdsz,stdsz); //NSLDECLS 
	 erasure2=new NslDinFloat2 ("erasure2",this,stdsz,stdsz); //NSLDECLS 
	 thmem=new NslDoutFloat2 ("thmem",this,stdsz,stdsz); //NSLDECLS 
	 thmemPot_tm=new NslFloat0 ("thmemPot_tm",this); //NSLDECLS 
	 thmemPot_k1=new NslFloat0 ("thmemPot_k1",this); //NSLDECLS 
	 thmemPot_k2=new NslFloat0 ("thmemPot_k2",this); //NSLDECLS 
	 thmemPot_k3=new NslFloat0 ("thmemPot_k3",this); //NSLDECLS 
	 thmem_x1=new NslFloat0 ("thmem_x1",this); //NSLDECLS 
	 thmem_x2=new NslFloat0 ("thmem_x2",this); //NSLDECLS 
	 thmem_y1=new NslFloat0 ("thmem_y1",this); //NSLDECLS 
	 thmem_y2=new NslFloat0 ("thmem_y2",this); //NSLDECLS 
	 thmemPot=new NslFloat2 ("thmemPot",this,stdsz,stdsz); //NSLDECLS 
	 erasureConvSCDelay=new NslFloat2 ("erasureConvSCDelay",this,stdsz,stdsz); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
