/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */

/*Bursters
* Burst Neurons
* @see Bursters.nslm
* @version 98/6/18
* @author Dominey and Alexander
*
*/
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class Bursters extends NslModule /*(int stdsz)*/ 	 {
// ports
public NslDinFloat0 lebn ; /* ()*/
public NslDinFloat0 rebn ; /* ()*/
public NslDinFloat0 uebn ; /* ()*/
public NslDinFloat0 debn ; /* ()*/

public NslDoutFloat2 saccademask ; /*(stdsz,stdsz)*/
// parameters 
private NslFloat0 saccadebool_k1 ; /*()*/
private NslFloat0 saccadebool_k2 ; /*()*/
private NslFloat0 saccadebool_k3 ; /*()*/

//vars
private NslFloat0 bursters ; /*  ()*/


public  void initRun() {
	saccadebool_k1.set(240);
	saccadebool_k2.set(1);
	saccadebool_k3.set(0);
}
public  void simRun() {
	bursters.set(
 nslj.src.math.NslAdd.eval(
 nslj.src.math.NslAdd.eval(
 nslj.src.math.NslAdd.eval(uebn.get(),debn.get()),lebn.get()),rebn.get()));
	// aa: this is reverse of what is intuitive
	// if x<240, then y=1.0
	// if x>=240, then y=0.0
	saccademask.set(NslStep.eval(bursters,saccadebool_k1,saccadebool_k2,saccadebool_k3)) /* rule 108 */;
	if (system.debug>=14) {
		System.out.println("Bursters:simRun: saccademask");
		System.out.println(saccademask);
	}
}

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;

	 /*GENERIC CONSTRUCTOR:   */
	 public Bursters(String nslName, NslModule nslParent,int stdsz) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		initSys();
		makeInst(nslName, nslParent,stdsz);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz){ 
	 lebn=new NslDinFloat0 ("lebn",this); //NSLDECLS 
	 rebn=new NslDinFloat0 ("rebn",this); //NSLDECLS 
	 uebn=new NslDinFloat0 ("uebn",this); //NSLDECLS 
	 debn=new NslDinFloat0 ("debn",this); //NSLDECLS 
	 saccademask=new NslDoutFloat2 ("saccademask",this,stdsz,stdsz); //NSLDECLS 
	 saccadebool_k1=new NslFloat0 ("saccadebool_k1",this); //NSLDECLS 
	 saccadebool_k2=new NslFloat0 ("saccadebool_k2",this); //NSLDECLS 
	 saccadebool_k3=new NslFloat0 ("saccadebool_k3",this); //NSLDECLS 
	 bursters=new NslFloat0 ("bursters",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} // end of class
