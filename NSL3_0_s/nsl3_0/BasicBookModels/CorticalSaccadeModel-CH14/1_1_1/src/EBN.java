/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */
/*EBN
* Excitatory burst neurons -  module
* @see  EBN.nslm
* @version 98/6/18
* @author Dominey and Alexander
* Ebns for left, right up and down - since we did a winner take all
* in the llbns, the maximum element is the one we want. 
* Inhibited by pause cells
*/
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class EBN extends NslModule /*(int stdsz)*/  {

// ports
public NslDinFloat0 pause ; /*()*/  //input
public NslDinFloat2 mlbn ; /*(stdsz,stdsz)*/  //input
public NslDoutFloat0 ebn ; /* ()*/ // output
// parameters 
// aa: shortened this list from the orignal
private NslFloat0 ebnPot_tm ; /*()*/
private NslFloat0 ebnPot_k1 ; /*()*/
private NslFloat0 ebn_k1 ; /*()*/
private NslFloat0 ebn_k2 ; /*()*/
private NslFloat0 ebn_k3 ; /*()*/
// vars
private NslFloat0 ebnPot ; /* ()*/	// excitatory burst neurons of the brainstem saccade generator
private NslFloat0 mlbnMax ; /*()*/	// medium long lead burst neurons max

public  void initRun() {
	ebn.set(0);
	ebnPot.set(0);
	mlbnMax.set(0);

	ebnPot_tm.set(0.006);
	ebnPot_k1.set(10);
	ebn_k1.set(240);
	ebn_k2.set(0);
	ebn_k3.set(240);

}
public  void simRun() {
	mlbnMax.set(NslMaxValue.eval(mlbn)) /* rule 108 */;
	ebnPot.set(system.nsldiff.eval(ebnPot,ebnPot_tm,(
 nslj.src.math.NslAdd.eval(nslj.src.math.NslSub.eval(0,ebnPot),mlbnMax.get()))-(
 nslj.src.math.NslElemMult.eval(ebnPot_k1.get(),pause.get())))) /* rule 108 */;
	ebn.set(NslRamp.eval(ebnPot,ebn_k1,ebn_k2,ebn_k3)) /* rule 108 */;
	if (system.debug>=8) {
		System.out.println(("EBN:simRun: ebn:")+(ebn));
		System.out.println(("EBN:simRun: mlbnMax:")+(mlbnMax));
	}
}
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;

	 /*GENERIC CONSTRUCTOR:   */
	 public EBN(String nslName, NslModule nslParent,int stdsz) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		initSys();
		makeInst(nslName, nslParent,stdsz);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz){ 
	 pause=new NslDinFloat0 ("pause",this); //NSLDECLS 
	 mlbn=new NslDinFloat2 ("mlbn",this,stdsz,stdsz); //NSLDECLS 
	 ebn=new NslDoutFloat0 ("ebn",this); //NSLDECLS 
	 ebnPot_tm=new NslFloat0 ("ebnPot_tm",this); //NSLDECLS 
	 ebnPot_k1=new NslFloat0 ("ebnPot_k1",this); //NSLDECLS 
	 ebn_k1=new NslFloat0 ("ebn_k1",this); //NSLDECLS 
	 ebn_k2=new NslFloat0 ("ebn_k2",this); //NSLDECLS 
	 ebn_k3=new NslFloat0 ("ebn_k3",this); //NSLDECLS 
	 ebnPot=new NslFloat0 ("ebnPot",this); //NSLDECLS 
	 mlbnMax=new NslFloat0 ("mlbnMax",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
