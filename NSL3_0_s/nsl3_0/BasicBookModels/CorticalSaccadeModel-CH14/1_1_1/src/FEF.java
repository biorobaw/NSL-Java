/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */

/*FEF
* Frontal Eye Field Submodule for Saccades
* @see FEF.mod
* @version 98/6/18
* @author Dominey: coder Alexander
*
*/
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class FEF extends NslModule /*(int stdsz)*/  {

// port inputs
public NslDinFloat2 ppqv ; /* (stdsz,stdsz)*/
public NslDinFloat2 thmem ; /*(stdsz,stdsz)*/
public NslDinFloat2 fon ; /*(stdsz,stdsz)*/
public NslDinFloat2 stimulation ; /*(stdsz,stdsz)*/

// port outputs
public NslDoutFloat2 fefvis ; /*(stdsz,stdsz)*/  
public NslDoutFloat2 fefmem ; /*(stdsz,stdsz)*/
public NslDoutFloat2 fefsac ; /*(stdsz,stdsz)*/
// parameters 
private NslFloat0 fefmemPot_tm ; /*()*/
private NslFloat0 fefvisPot_tm ; /*()*/
private NslFloat0 fefsacPot_tm ; /*()*/
private NslFloat0 fefmemPot_k1 ; /*()*/
private NslFloat0 fefmemPot_k2 ; /*()*/
private NslFloat0 fefmemPot_k4 ; /*()*/
private NslFloat0 fefsacPot_k1 ; /*()*/
private NslFloat0 fefsacPot_k2 ; /*()*/
private NslFloat0 fefsacPot_k3 ; /*()*/
private NslFloat0 fefvisPot_k1 ; /*()*/
private NslFloat0 fefvisPot_k2 ; /*()*/
private NslFloat0 fefvis_x1 ; /*()*/
private NslFloat0 fefvis_x2 ; /*()*/
private NslFloat0 fefvis_y1 ; /*()*/
private NslFloat0 fefvis_y2 ; /*()*/
private NslFloat0 fefmem_x1 ; /*()*/
private NslFloat0 fefmem_x2 ; /*()*/
private NslFloat0 fefmem_y1 ; /*()*/
private NslFloat0 fefmem_y2 ; /*()*/
private NslFloat0 fefsac_x1 ; /*()*/
private NslFloat0 fefsac_x2 ; /*()*/
private NslFloat0 fefsac_y1 ; /*()*/
private NslFloat0 fefsac_y2 ; /*()*/
private NslFloat0 fefsac_k1 ; /*()*/

//vars
private NslFloat2 fefvisPot ; /*(stdsz,stdsz)*/
private NslFloat2 fefmemPot ; /*(stdsz,stdsz)*/
private NslFloat2 fefsacPot ; /*(stdsz,stdsz)*/
private NslFloat2 fefsactmp ; /*(stdsz,stdsz)*/

private NslInt0 protocolNum ; /*()*/
private  int center;


public  void initModule() {	
	fefsac.nslSetAccess('W');
	fefmemPot_k2.nslSetAccess('W');
}

public  void initRun() {
       center = (int) stdsz/2;

       protocolNum.set((NslInt0)nslGetValue("domineyModel.protocolNum")) /*rule 114 */;

       fefvis.set(0);
       fefmem.set(0);
       fefsac.set(0);
       fefvisPot.set(0);
       fefmemPot.set(0);
       fefsacPot.set(0);
       fefsactmp.set(0);

	fefmemPot_tm.set(.008);
	fefvisPot_tm.set(.006); //xxx???AA
	fefsacPot_tm.set(.008);
	fefmemPot_k1.set(0.2);
	fefmemPot_k2.set(0);
	//98/12/10 aa: not in 2.1.7  :doing a memory protocolNum
	if ((((
 nslj.src.math.NslEqu.eval(protocolNum.get(),2))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),3)))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),8)))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),15))) {	
		fefmemPot_k2.set(1);  //was lost in NSL2.1.7 nsl file
	}
	fefmemPot_k4.set(8);

	fefsacPot_k1.set(1);
	fefsacPot_k2.set(2);
	fefsacPot_k3.set(3);
	fefvisPot_k1.set(0);
	fefvisPot_k2.set(1);
	fefvis_x1.set(0);
	fefvis_x2.set(90);
	fefvis_y1.set(0);
	fefvis_y2.set(90);
	fefmem_x1.set(0);
	fefmem_x2.set(90);
	fefmem_y1.set(0);
	fefmem_y2.set(90);
	fefsac_x1.set(80); //AA: in 2.1.7 but whynot 0?
	fefsac_x2.set(90);
	fefsac_y1.set(0);
	fefsac_y2.set(90);
	
 	//XX 98/11/18 aa: fefsac_k1 depeneds on protocolNum 
	// fefsac_k1*stimulation:
	// simple,double = 0
	// collision  = 4.8 why?
	// compensatoryI = 2.5 why?  Published doc says: 1.58
	// compensatoryII = nothing stated. Published doc says: 1.58
	// If we look at the SC equations: supcol_k3 then this
	// fefsac_k1 for compII should be stronger than for compI case.
	// For this reason we will set it to 3.5
	fefsac_k1.set(0);  // if stimulation is not used on FEF in most protocolNums
	// if stimulation used
	if ((
 nslj.src.math.NslEqu.eval(protocolNum.get(),11))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),13))) {
		fefsac_k1.set(2.5);  // 
		// Thesis says fefsac_k1= 1.58 at 175 hz for 40 msec
		// for compensatory protocolNums but in the potential equation
	}
	if (
 nslj.src.math.NslEqu.eval(protocolNum.get(),12)) {
		fefsac_k1.set(3.5);
	}
}
public  void simRun() {

	fefvisPot.set(system.nsldiff.eval(fefvisPot,fefvisPot_tm,
 __nsltmp102=nslj.src.math.NslAdd.eval(__nsltmp102,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,fefvisPot.get()),ppqv.get()))) /* rule 108 */;
	fefmemPot.set(system.nsldiff.eval(fefmemPot,fefmemPot_tm,
 __nsltmp109=nslj.src.math.NslSub.eval(__nsltmp109,
 __nsltmp107=nslj.src.math.NslAdd.eval(__nsltmp107,
 __nsltmp105=nslj.src.math.NslAdd.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslSub.eval(__nsltmp103,0,fefmemPot.get()),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,fefmemPot_k4.get(),thmem.get())),
 __nsltmp106=nslj.src.math.NslElemMult.eval(__nsltmp106,fefmemPot_k2.get(),fefvis.get())),
 __nsltmp108=nslj.src.math.NslElemMult.eval(__nsltmp108,fefmemPot_k1.get(),fon.get())))) /* rule 108 */;
	fefsacPot.set(system.nsldiff.eval(fefsacPot,fefsacPot_tm,
 __nsltmp116=nslj.src.math.NslSub.eval(__nsltmp116,
 __nsltmp114=nslj.src.math.NslAdd.eval(__nsltmp114,
 __nsltmp112=nslj.src.math.NslAdd.eval(__nsltmp112,
 __nsltmp110=nslj.src.math.NslSub.eval(__nsltmp110,0,fefsacPot.get()),
 __nsltmp111=nslj.src.math.NslElemMult.eval(__nsltmp111,fefsacPot_k1.get(),fefvis.get())),
 __nsltmp113=nslj.src.math.NslElemMult.eval(__nsltmp113,fefsacPot_k2.get(),fefmem.get())),
 __nsltmp115=nslj.src.math.NslElemMult.eval(__nsltmp115,fefsacPot_k3.get(),fon.get())))) /* rule 108 */;
	// aa: note: the published doc addes the fefsac_k1*stimulation 
	// in this equations (fefsacPot) instead of the fefsac equation below.

	(fefsacPot).set(center,center,0);
	fefvis.set(NslSigmoid.eval(fefvisPot,fefvis_x1,fefvis_x2,fefvis_y1,fefvis_y2)) /* rule 108 */;

	fefmem.set(NslSigmoid.eval(fefmemPot,fefmem_x1,fefmem_x2,fefmem_y1,fefmem_y2)) /* rule 108 */;

	fefsactmp.set(NslSigmoid.eval(fefsacPot,fefsac_x1,fefsac_x2,fefsac_y1,fefsac_y2)) /* rule 108 */; 
	fefsac.set(
 __nsltmp118=nslj.src.math.NslAdd.eval(__nsltmp118,fefsactmp.get(),
 __nsltmp117=nslj.src.math.NslElemMult.eval(__nsltmp117,fefsac_k1.get(),stimulation.get())));

	//98/12/8 aa: from the 92 paper, set fefsac to 0 in equation 13 for
	// lesioning of fef
	if ((
 nslj.src.math.NslEqu.eval(protocolNum.get(),7))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),14))) {//lesion fef
		fefsac.set(0);  
	}

	if (system.debug>=18) {
	System.out.println("simRun: FEF: fefsac:");
	System.out.println(fefsac);
	System.out.println("simRun: FEF: fefmem:");
	System.out.println(fefmem);
	System.out.println("simRun: FEF: fefvis:");
	System.out.println(fefvis);
	}
}
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new float[1][1];
	__nsltmp102 = new float[1][1];
	__nsltmp103 = new float[1][1];
	__nsltmp104 = new float[1][1];
	__nsltmp105 = new float[1][1];
	__nsltmp106 = new float[1][1];
	__nsltmp107 = new float[1][1];
	__nsltmp108 = new float[1][1];
	__nsltmp109 = new float[1][1];
	__nsltmp110 = new float[1][1];
	__nsltmp111 = new float[1][1];
	__nsltmp112 = new float[1][1];
	__nsltmp113 = new float[1][1];
	__nsltmp114 = new float[1][1];
	__nsltmp115 = new float[1][1];
	__nsltmp116 = new float[1][1];
	__nsltmp117 = new float[1][1];
	__nsltmp118 = new float[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		for (int j = 0; j < __nsltmp107[0].length; j++) {
			__nsltmp107[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp108.length; i++) {
		for (int j = 0; j < __nsltmp108[0].length; j++) {
			__nsltmp108[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp109.length; i++) {
		for (int j = 0; j < __nsltmp109[0].length; j++) {
			__nsltmp109[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp110.length; i++) {
		for (int j = 0; j < __nsltmp110[0].length; j++) {
			__nsltmp110[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp111.length; i++) {
		for (int j = 0; j < __nsltmp111[0].length; j++) {
			__nsltmp111[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp112.length; i++) {
		for (int j = 0; j < __nsltmp112[0].length; j++) {
			__nsltmp112[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp113.length; i++) {
		for (int j = 0; j < __nsltmp113[0].length; j++) {
			__nsltmp113[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp114.length; i++) {
		for (int j = 0; j < __nsltmp114[0].length; j++) {
			__nsltmp114[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp115.length; i++) {
		for (int j = 0; j < __nsltmp115[0].length; j++) {
			__nsltmp115[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp116.length; i++) {
		for (int j = 0; j < __nsltmp116[0].length; j++) {
			__nsltmp116[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp117.length; i++) {
		for (int j = 0; j < __nsltmp117[0].length; j++) {
			__nsltmp117[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp118.length; i++) {
		for (int j = 0; j < __nsltmp118[0].length; j++) {
			__nsltmp118[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  float[][] __nsltmp101;
	private  float[][] __nsltmp102;
	private  float[][] __nsltmp103;
	private  float[][] __nsltmp104;
	private  float[][] __nsltmp105;
	private  float[][] __nsltmp106;
	private  float[][] __nsltmp107;
	private  float[][] __nsltmp108;
	private  float[][] __nsltmp109;
	private  float[][] __nsltmp110;
	private  float[][] __nsltmp111;
	private  float[][] __nsltmp112;
	private  float[][] __nsltmp113;
	private  float[][] __nsltmp114;
	private  float[][] __nsltmp115;
	private  float[][] __nsltmp116;
	private  float[][] __nsltmp117;
	private  float[][] __nsltmp118;
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;

	 /*GENERIC CONSTRUCTOR:   */
	 public FEF(String nslName, NslModule nslParent,int stdsz) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		initSys();
		makeInst(nslName, nslParent,stdsz);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz){ 
	 ppqv=new NslDinFloat2 ("ppqv",this,stdsz,stdsz); //NSLDECLS 
	 thmem=new NslDinFloat2 ("thmem",this,stdsz,stdsz); //NSLDECLS 
	 fon=new NslDinFloat2 ("fon",this,stdsz,stdsz); //NSLDECLS 
	 stimulation=new NslDinFloat2 ("stimulation",this,stdsz,stdsz); //NSLDECLS 
	 fefvis=new NslDoutFloat2 ("fefvis",this,stdsz,stdsz); //NSLDECLS 
	 fefmem=new NslDoutFloat2 ("fefmem",this,stdsz,stdsz); //NSLDECLS 
	 fefsac=new NslDoutFloat2 ("fefsac",this,stdsz,stdsz); //NSLDECLS 
	 fefmemPot_tm=new NslFloat0 ("fefmemPot_tm",this); //NSLDECLS 
	 fefvisPot_tm=new NslFloat0 ("fefvisPot_tm",this); //NSLDECLS 
	 fefsacPot_tm=new NslFloat0 ("fefsacPot_tm",this); //NSLDECLS 
	 fefmemPot_k1=new NslFloat0 ("fefmemPot_k1",this); //NSLDECLS 
	 fefmemPot_k2=new NslFloat0 ("fefmemPot_k2",this); //NSLDECLS 
	 fefmemPot_k4=new NslFloat0 ("fefmemPot_k4",this); //NSLDECLS 
	 fefsacPot_k1=new NslFloat0 ("fefsacPot_k1",this); //NSLDECLS 
	 fefsacPot_k2=new NslFloat0 ("fefsacPot_k2",this); //NSLDECLS 
	 fefsacPot_k3=new NslFloat0 ("fefsacPot_k3",this); //NSLDECLS 
	 fefvisPot_k1=new NslFloat0 ("fefvisPot_k1",this); //NSLDECLS 
	 fefvisPot_k2=new NslFloat0 ("fefvisPot_k2",this); //NSLDECLS 
	 fefvis_x1=new NslFloat0 ("fefvis_x1",this); //NSLDECLS 
	 fefvis_x2=new NslFloat0 ("fefvis_x2",this); //NSLDECLS 
	 fefvis_y1=new NslFloat0 ("fefvis_y1",this); //NSLDECLS 
	 fefvis_y2=new NslFloat0 ("fefvis_y2",this); //NSLDECLS 
	 fefmem_x1=new NslFloat0 ("fefmem_x1",this); //NSLDECLS 
	 fefmem_x2=new NslFloat0 ("fefmem_x2",this); //NSLDECLS 
	 fefmem_y1=new NslFloat0 ("fefmem_y1",this); //NSLDECLS 
	 fefmem_y2=new NslFloat0 ("fefmem_y2",this); //NSLDECLS 
	 fefsac_x1=new NslFloat0 ("fefsac_x1",this); //NSLDECLS 
	 fefsac_x2=new NslFloat0 ("fefsac_x2",this); //NSLDECLS 
	 fefsac_y1=new NslFloat0 ("fefsac_y1",this); //NSLDECLS 
	 fefsac_y2=new NslFloat0 ("fefsac_y2",this); //NSLDECLS 
	 fefsac_k1=new NslFloat0 ("fefsac_k1",this); //NSLDECLS 
	 fefvisPot=new NslFloat2 ("fefvisPot",this,stdsz,stdsz); //NSLDECLS 
	 fefmemPot=new NslFloat2 ("fefmemPot",this,stdsz,stdsz); //NSLDECLS 
	 fefsacPot=new NslFloat2 ("fefsacPot",this,stdsz,stdsz); //NSLDECLS 
	 fefsactmp=new NslFloat2 ("fefsactmp",this,stdsz,stdsz); //NSLDECLS 
	 protocolNum=new NslInt0 ("protocolNum",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
