/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */

/**
* SC
* Superior Colliculus
* @see SC.nslm
* @version 98/6/23
* @author Dominey and coder Alexander
*
*/

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class SC extends NslModule /*(int stdsz)*/  {

// port inputs
public NslDinFloat2 snrsac ; /*(stdsz,stdsz)*/
public NslDinFloat2 fefsac ; /*(stdsz,stdsz)*/
public NslDinFloat2 stimulation ; /*(stdsz,stdsz)*/
public NslDinFloat2 fon ; /*(stdsz,stdsz)*/
public NslDinFloat2 retina ; /*(stdsz,stdsz)*/
public NslDinFloat2 ppqv ; /*(stdsz,stdsz)*/
public NslDinFloat2 saccademask ; /*(stdsz,stdsz)*/
// port outputs
public NslDoutFloat2 scqv ; /*(stdsz,stdsz)*/
public NslDoutFloat2 supcol ; /*(stdsz,stdsz)*/
public NslDoutFloat2 scsac ; /*(stdsz,stdsz)*/
public NslDoutFloat2 scDelay ; /*(stdsz,stdsz)*/

// parameters 
private NslFloat0 scsupPot_tm ; /*()*/
private NslFloat0 scqvPot_tm ; /*()*/
private NslFloat0 scsacPot_tm ; /*()*/
private NslFloat0 supcolPot_tm ; /*()*/
private NslFloat0 scDelay_tm ; /*()*/
private NslFloat0 scsupPot_k1 ; /*()*/
private NslFloat0 scsupPot_k2 ; /*()*/
private NslFloat0 scsacPot_k1 ; /*()*/
private NslFloat0 scsacPot_k2 ; /*()*/
private NslFloat0 supcolPot_k1 ; /*()*/
private NslFloat0 supcolPot_k2 ; /*()*/
private NslFloat0 supcolPot_k3 ; /*()*/
private NslFloat0 supcolPot_k4 ; /*()*/
private NslFloat0 supcolPot_k5 ; /*()*/
private NslFloat0 supcolPot_k6 ; /*()*/
private NslFloat0 scsup_x1 ; /*()*/
private NslFloat0 scsup_x2 ; /*()*/
private NslFloat0 scsup_y1 ; /*()*/
private NslFloat0 scsup_y2 ; /*()*/
private NslFloat0 scsac_x1 ; /*()*/
private NslFloat0 scsac_x2 ; /*()*/
private NslFloat0 scsac_y1 ; /*()*/
private NslFloat0 scsac_y2 ; /*()*/
private NslFloat0 supcol_x1 ; /*()*/
private NslFloat0 supcol_x2 ; /*()*/
private NslFloat0 supcol_y1 ; /*()*/
private NslFloat0 supcol_y2 ; /*()*/
private NslFloat0 supcol_k3 ; /*()*/

//vars

private NslFloat2 scsupPot ; /*(stdsz,stdsz)*/
private NslFloat2 scqvPot ; /*(stdsz,stdsz)*/
private NslFloat2 scsacPot ; /*(stdsz,stdsz)*/
private NslFloat2 supcolPot ; /*(stdsz,stdsz)*/
//private NslFloat2 scsac(stdsz,stdsz);
private NslFloat2 scsup ; /*(stdsz,stdsz)*/
private NslFloat2 ppqv_winner ; /*(stdsz,stdsz)*/ //winner take all resultant
private NslFloat2 sc_winner ; /*(stdsz,stdsz)*/ //winner take all resultant

private NslFloat0 nWTAThreshold ; /*()*/
private NslInt0 protocolNum ; /*()*/

private  int center;

public  void initModule() {
	supcol.nslSetAccess('W');
	supcol_k3.nslSetAccess('W');
}

public  void initRun() {
	center = (int)stdsz/2;
	nWTAThreshold.set((NslFloat0)nslGetValue("domineyModel.nWTAThreshold")) /*rule 114 */;
	protocolNum.set(-(1));
	protocolNum.set((NslInt0)nslGetValue("domineyModel.protocolNum")) /*rule 114 */;

       scqv.set(0);
       supcol.set(0);
       scDelay.set(0);
       scsupPot.set(0);
       scqvPot.set(0);
       scsacPot.set(0);
       supcolPot.set(0);
       scsac.set(0);
       scsup.set(0);
       ppqv_winner.set(0);
       sc_winner.set(0);

	scsupPot_tm.set(.03);
	scqvPot_tm.set(.01);
	scsacPot_tm.set(.01);  //aa: 0.3 is mentioned in 2.1.7
	supcolPot_tm.set(.038);
	scDelay_tm.set(0.1);
	scsupPot_k1.set(15);
	scsupPot_k2.set(1);
	scsacPot_k1.set(1);
	scsacPot_k2.set(1.1);
	supcolPot_k1.set(0);
	supcolPot_k2.set(1);
	supcolPot_k3.set(1.5);
	supcolPot_k4.set(2);
	supcolPot_k5.set(0);  // since k5 is always 0, we can remove it
				 // from calculations
	supcolPot_k6.set(4);  // published doc has 2 for all experiments
	scsup_x1.set(70);
	scsup_x2.set(90);
	scsup_y1.set(0);
	scsup_y2.set(90);
	scsac_x1.set(80);
	scsac_x2.set(90);
	scsac_y1.set(0);
	scsac_y2.set(90);
	supcol_x1.set(85);
	supcol_x2.set(99);
	supcol_y1.set(0);
	supcol_y2.set(500);	
	supcol_k3.set(0);


       // 98/11/18 aa: values for supcol_k3 depend on protocolNum:
       // 0 for single and double and memory
       // supcol_k3 =2.6 for stimulation SC CompensatoryI - why?
       // supcol_k3 =3.5 for stimulation SC CompensatoryII - why?
       // supcol_k3 =7 for collision - why?
 	 // published doc has supcol_k3=2.9 for experiment 13 but in 
	// the potential equation
	

       supcol_k3.set(0);  // if stimulation is not used 
	// if sc compI
	if ((
 nslj.src.math.NslEqu.eval(protocolNum.get(),9))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),14))) {
		supcol_k3.set(2.6);  
       }
	 // if sc compensatoryII
       else if (
 nslj.src.math.NslEqu.eval(protocolNum.get(),10)) { 
               supcol_k3.set(3.5);  
       } 
	 //not doing collision protocolNums // if collision ??
       //              supcol_k3=7;  
}
	
public  void simRun() {

	scsupPot.set(system.nsldiff.eval(scsupPot,scsupPot_tm,
 __nsltmp105=nslj.src.math.NslAdd.eval(__nsltmp105,
 __nsltmp103=nslj.src.math.NslSub.eval(__nsltmp103,
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,0,scsupPot.get()),
 __nsltmp102=nslj.src.math.NslElemMult.eval(__nsltmp102,scsupPot_k1.get(),fon.get())),
 __nsltmp104=nslj.src.math.NslElemMult.eval(__nsltmp104,scsupPot_k2.get(),retina.get())))) /* rule 108 */;

	ppqv_winner.set(DomineyLib.winnerTakeAll(ppqv,nWTAThreshold.get(),stdsz)) /* rule 108 */;

	scqvPot.set(system.nsldiff.eval(scqvPot,scqvPot_tm,
 __nsltmp107=nslj.src.math.NslAdd.eval(__nsltmp107,
 __nsltmp106=nslj.src.math.NslSub.eval(__nsltmp106,0,scqvPot.get()),ppqv_winner.get()))) /* rule 108 */;

	scsacPot.set(system.nsldiff.eval(scsacPot,scsacPot_tm,
 __nsltmp112=nslj.src.math.NslSub.eval(__nsltmp112,
 __nsltmp110=nslj.src.math.NslAdd.eval(__nsltmp110,
 __nsltmp108=nslj.src.math.NslSub.eval(__nsltmp108,0,scsacPot.get()),
 __nsltmp109=nslj.src.math.NslElemMult.eval(__nsltmp109,scsacPot_k1.get(),fefsac.get())),
 __nsltmp111=nslj.src.math.NslElemMult.eval(__nsltmp111,scsacPot_k2.get(),snrsac.get())))) /* rule 108 */;

	// supcolPot=nslDiff(supcolPot,supcolPot_tm, -supcolPot  + 
	//	supcolPot_k2*scsac + 
	//	supcolPot_k3*scqv -
	//	supcolPot_k4*fon  + 
	//	supcolPot_k5*stimulation +  //removing because k5 always 0
	//	supcolPot_k6*scsup - 
	//	supcolPot_k1*scDelay); // this is zero.
	supcolPot.set(system.nsldiff.eval(supcolPot,supcolPot_tm,
 __nsltmp123=nslj.src.math.NslSub.eval(__nsltmp123,
 __nsltmp121=nslj.src.math.NslAdd.eval(__nsltmp121,
 __nsltmp119=nslj.src.math.NslSub.eval(__nsltmp119,
 __nsltmp117=nslj.src.math.NslAdd.eval(__nsltmp117,
 __nsltmp115=nslj.src.math.NslAdd.eval(__nsltmp115,
 __nsltmp113=nslj.src.math.NslSub.eval(__nsltmp113,0,supcolPot.get()),
 __nsltmp114=nslj.src.math.NslElemMult.eval(__nsltmp114,supcolPot_k2.get(),scsac.get())),
 __nsltmp116=nslj.src.math.NslElemMult.eval(__nsltmp116,supcolPot_k3.get(),scqv.get())),
 __nsltmp118=nslj.src.math.NslElemMult.eval(__nsltmp118,supcolPot_k4.get(),fon.get())),
 __nsltmp120=nslj.src.math.NslElemMult.eval(__nsltmp120,supcolPot_k6.get(),scsup.get())),
 __nsltmp122=nslj.src.math.NslElemMult.eval(__nsltmp122,supcolPot_k1.get(),scDelay.get())))) /* rule 108 */; // this is zero.
// aa: should we remove the kx*stimulation factor
// from both supcol and fefsac force equations 
// and put the kx*stimulation back in the potential calculation as
// it is in the published paper ? 

	(supcolPot).set(center,center,0); // no saccades to where we already are! 

	sc_winner.set(DomineyLib.winnerTakeAll(supcolPot,nWTAThreshold.get(),stdsz)) /* rule 108 */;

	scsup.set(NslSigmoid.eval(scsupPot,scsup_x1,scsup_x2,scsup_y1,scsup_y2)) /* rule 108 */;

	scqv.set(
 __nsltmp124=nslj.src.math.NslElemMult.eval(__nsltmp124,saccademask.get(),scqvPot.get()));

	scsac.set(NslSigmoid.eval(scsacPot,scsac_x1,scsac_x2,scsac_y1,scsac_y2)) /* rule 108 */;

	//aa: from the 92 paper equation 15 is set  to zero if lesioning SC
        if ((
 nslj.src.math.NslEqu.eval(protocolNum.get(),6))||(
 nslj.src.math.NslEqu.eval(protocolNum.get(),13)))  { // lesion SC
               supcol.set(0);
        } else {
	  supcol.set(NslSigmoid.eval(sc_winner,supcol_x1,supcol_x2,supcol_y1,supcol_y2)) /* rule 108 */; 	
	  supcol.set(
 __nsltmp126=nslj.src.math.NslAdd.eval(__nsltmp126,supcol.get(),
 __nsltmp125=nslj.src.math.NslElemMult.eval(__nsltmp125,supcol_k3.get(),stimulation.get())));
        }

	scDelay.set(system.nsldiff.eval(scDelay,scDelay_tm,
 __nsltmp128=nslj.src.math.NslAdd.eval(__nsltmp128,
 __nsltmp127=nslj.src.math.NslSub.eval(__nsltmp127,0,scDelay.get()),supcol.get()))) /* rule 108 */;

	if (system.debug>=24) {
 	System.out.println("SC: :supcolPot ");
	System.out.println(supcolPot);
 	System.out.println("SC: :scqv ");
	System.out.println(scqv);
 	System.out.println("SC: :scDelay ");
	System.out.println(scDelay);
 	System.out.println("SC: supcol ");
	System.out.println(supcol);
 	System.out.println("SC: scsac ");
	System.out.println(scsac);
	
	}
}
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new float[1][1];
	__nsltmp102 = new float[1][1];
	__nsltmp103 = new float[1][1];
	__nsltmp104 = new float[1][1];
	__nsltmp105 = new float[1][1];
	__nsltmp106 = new float[1][1];
	__nsltmp107 = new float[1][1];
	__nsltmp108 = new float[1][1];
	__nsltmp109 = new float[1][1];
	__nsltmp110 = new float[1][1];
	__nsltmp111 = new float[1][1];
	__nsltmp112 = new float[1][1];
	__nsltmp113 = new float[1][1];
	__nsltmp114 = new float[1][1];
	__nsltmp115 = new float[1][1];
	__nsltmp116 = new float[1][1];
	__nsltmp117 = new float[1][1];
	__nsltmp118 = new float[1][1];
	__nsltmp119 = new float[1][1];
	__nsltmp120 = new float[1][1];
	__nsltmp121 = new float[1][1];
	__nsltmp122 = new float[1][1];
	__nsltmp123 = new float[1][1];
	__nsltmp124 = new float[1][1];
	__nsltmp125 = new float[1][1];
	__nsltmp126 = new float[1][1];
	__nsltmp127 = new float[1][1];
	__nsltmp128 = new float[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		for (int j = 0; j < __nsltmp103[0].length; j++) {
			__nsltmp103[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp104.length; i++) {
		for (int j = 0; j < __nsltmp104[0].length; j++) {
			__nsltmp104[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp105.length; i++) {
		for (int j = 0; j < __nsltmp105[0].length; j++) {
			__nsltmp105[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		for (int j = 0; j < __nsltmp107[0].length; j++) {
			__nsltmp107[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp108.length; i++) {
		for (int j = 0; j < __nsltmp108[0].length; j++) {
			__nsltmp108[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp109.length; i++) {
		for (int j = 0; j < __nsltmp109[0].length; j++) {
			__nsltmp109[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp110.length; i++) {
		for (int j = 0; j < __nsltmp110[0].length; j++) {
			__nsltmp110[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp111.length; i++) {
		for (int j = 0; j < __nsltmp111[0].length; j++) {
			__nsltmp111[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp112.length; i++) {
		for (int j = 0; j < __nsltmp112[0].length; j++) {
			__nsltmp112[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp113.length; i++) {
		for (int j = 0; j < __nsltmp113[0].length; j++) {
			__nsltmp113[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp114.length; i++) {
		for (int j = 0; j < __nsltmp114[0].length; j++) {
			__nsltmp114[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp115.length; i++) {
		for (int j = 0; j < __nsltmp115[0].length; j++) {
			__nsltmp115[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp116.length; i++) {
		for (int j = 0; j < __nsltmp116[0].length; j++) {
			__nsltmp116[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp117.length; i++) {
		for (int j = 0; j < __nsltmp117[0].length; j++) {
			__nsltmp117[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp118.length; i++) {
		for (int j = 0; j < __nsltmp118[0].length; j++) {
			__nsltmp118[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp119.length; i++) {
		for (int j = 0; j < __nsltmp119[0].length; j++) {
			__nsltmp119[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp120.length; i++) {
		for (int j = 0; j < __nsltmp120[0].length; j++) {
			__nsltmp120[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp121.length; i++) {
		for (int j = 0; j < __nsltmp121[0].length; j++) {
			__nsltmp121[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp122.length; i++) {
		for (int j = 0; j < __nsltmp122[0].length; j++) {
			__nsltmp122[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp123.length; i++) {
		for (int j = 0; j < __nsltmp123[0].length; j++) {
			__nsltmp123[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp124.length; i++) {
		for (int j = 0; j < __nsltmp124[0].length; j++) {
			__nsltmp124[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp125.length; i++) {
		for (int j = 0; j < __nsltmp125[0].length; j++) {
			__nsltmp125[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp126.length; i++) {
		for (int j = 0; j < __nsltmp126[0].length; j++) {
			__nsltmp126[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp127.length; i++) {
		for (int j = 0; j < __nsltmp127[0].length; j++) {
			__nsltmp127[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp128.length; i++) {
		for (int j = 0; j < __nsltmp128[0].length; j++) {
			__nsltmp128[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  float[][] __nsltmp101;
	private  float[][] __nsltmp102;
	private  float[][] __nsltmp103;
	private  float[][] __nsltmp104;
	private  float[][] __nsltmp105;
	private  float[][] __nsltmp106;
	private  float[][] __nsltmp107;
	private  float[][] __nsltmp108;
	private  float[][] __nsltmp109;
	private  float[][] __nsltmp110;
	private  float[][] __nsltmp111;
	private  float[][] __nsltmp112;
	private  float[][] __nsltmp113;
	private  float[][] __nsltmp114;
	private  float[][] __nsltmp115;
	private  float[][] __nsltmp116;
	private  float[][] __nsltmp117;
	private  float[][] __nsltmp118;
	private  float[][] __nsltmp119;
	private  float[][] __nsltmp120;
	private  float[][] __nsltmp121;
	private  float[][] __nsltmp122;
	private  float[][] __nsltmp123;
	private  float[][] __nsltmp124;
	private  float[][] __nsltmp125;
	private  float[][] __nsltmp126;
	private  float[][] __nsltmp127;
	private  float[][] __nsltmp128;
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;

	 /*GENERIC CONSTRUCTOR:   */
	 public SC(String nslName, NslModule nslParent,int stdsz) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		initSys();
		makeInst(nslName, nslParent,stdsz);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz){ 
	 snrsac=new NslDinFloat2 ("snrsac",this,stdsz,stdsz); //NSLDECLS 
	 fefsac=new NslDinFloat2 ("fefsac",this,stdsz,stdsz); //NSLDECLS 
	 stimulation=new NslDinFloat2 ("stimulation",this,stdsz,stdsz); //NSLDECLS 
	 fon=new NslDinFloat2 ("fon",this,stdsz,stdsz); //NSLDECLS 
	 retina=new NslDinFloat2 ("retina",this,stdsz,stdsz); //NSLDECLS 
	 ppqv=new NslDinFloat2 ("ppqv",this,stdsz,stdsz); //NSLDECLS 
	 saccademask=new NslDinFloat2 ("saccademask",this,stdsz,stdsz); //NSLDECLS 
	 scqv=new NslDoutFloat2 ("scqv",this,stdsz,stdsz); //NSLDECLS 
	 supcol=new NslDoutFloat2 ("supcol",this,stdsz,stdsz); //NSLDECLS 
	 scsac=new NslDoutFloat2 ("scsac",this,stdsz,stdsz); //NSLDECLS 
	 scDelay=new NslDoutFloat2 ("scDelay",this,stdsz,stdsz); //NSLDECLS 
	 scsupPot_tm=new NslFloat0 ("scsupPot_tm",this); //NSLDECLS 
	 scqvPot_tm=new NslFloat0 ("scqvPot_tm",this); //NSLDECLS 
	 scsacPot_tm=new NslFloat0 ("scsacPot_tm",this); //NSLDECLS 
	 supcolPot_tm=new NslFloat0 ("supcolPot_tm",this); //NSLDECLS 
	 scDelay_tm=new NslFloat0 ("scDelay_tm",this); //NSLDECLS 
	 scsupPot_k1=new NslFloat0 ("scsupPot_k1",this); //NSLDECLS 
	 scsupPot_k2=new NslFloat0 ("scsupPot_k2",this); //NSLDECLS 
	 scsacPot_k1=new NslFloat0 ("scsacPot_k1",this); //NSLDECLS 
	 scsacPot_k2=new NslFloat0 ("scsacPot_k2",this); //NSLDECLS 
	 supcolPot_k1=new NslFloat0 ("supcolPot_k1",this); //NSLDECLS 
	 supcolPot_k2=new NslFloat0 ("supcolPot_k2",this); //NSLDECLS 
	 supcolPot_k3=new NslFloat0 ("supcolPot_k3",this); //NSLDECLS 
	 supcolPot_k4=new NslFloat0 ("supcolPot_k4",this); //NSLDECLS 
	 supcolPot_k5=new NslFloat0 ("supcolPot_k5",this); //NSLDECLS 
	 supcolPot_k6=new NslFloat0 ("supcolPot_k6",this); //NSLDECLS 
	 scsup_x1=new NslFloat0 ("scsup_x1",this); //NSLDECLS 
	 scsup_x2=new NslFloat0 ("scsup_x2",this); //NSLDECLS 
	 scsup_y1=new NslFloat0 ("scsup_y1",this); //NSLDECLS 
	 scsup_y2=new NslFloat0 ("scsup_y2",this); //NSLDECLS 
	 scsac_x1=new NslFloat0 ("scsac_x1",this); //NSLDECLS 
	 scsac_x2=new NslFloat0 ("scsac_x2",this); //NSLDECLS 
	 scsac_y1=new NslFloat0 ("scsac_y1",this); //NSLDECLS 
	 scsac_y2=new NslFloat0 ("scsac_y2",this); //NSLDECLS 
	 supcol_x1=new NslFloat0 ("supcol_x1",this); //NSLDECLS 
	 supcol_x2=new NslFloat0 ("supcol_x2",this); //NSLDECLS 
	 supcol_y1=new NslFloat0 ("supcol_y1",this); //NSLDECLS 
	 supcol_y2=new NslFloat0 ("supcol_y2",this); //NSLDECLS 
	 supcol_k3=new NslFloat0 ("supcol_k3",this); //NSLDECLS 
	 scsupPot=new NslFloat2 ("scsupPot",this,stdsz,stdsz); //NSLDECLS 
	 scqvPot=new NslFloat2 ("scqvPot",this,stdsz,stdsz); //NSLDECLS 
	 scsacPot=new NslFloat2 ("scsacPot",this,stdsz,stdsz); //NSLDECLS 
	 supcolPot=new NslFloat2 ("supcolPot",this,stdsz,stdsz); //NSLDECLS 
	 scsup=new NslFloat2 ("scsup",this,stdsz,stdsz); //NSLDECLS 
	 ppqv_winner=new NslFloat2 ("ppqv_winner",this,stdsz,stdsz); //NSLDECLS 
	 sc_winner=new NslFloat2 ("sc_winner",this,stdsz,stdsz); //NSLDECLS 
	 nWTAThreshold=new NslFloat0 ("nWTAThreshold",this); //NSLDECLS 
	 protocolNum=new NslInt0 ("protocolNum",this); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
