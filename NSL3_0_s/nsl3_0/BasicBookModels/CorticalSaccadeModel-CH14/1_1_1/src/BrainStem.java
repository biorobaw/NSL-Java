/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS  %W% --- %G% -- %U% */
/**
* BrainStem
* BrainStem network
* @see  BrainStem.mod
* @version 98/6/18
* @author Dominey ; coder Alexander
* Saccade generator ala Scudder;  These arrays represent the increased
* density of SC projection to LLBNs as a function of increase eccentricity
* in SC. 
*/

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class BrainStem extends NslModule /*(int stdsz, int numOfDirections, NslFloat0 nWTAThreshold)*/  {
// inports
public NslDinFloat2 supcol ; /*(stdsz,stdsz)*/
public NslDinFloat2 fefsac ; /*(stdsz,stdsz)*/


// outports
public NslDoutFloat0 horizontalVelocity ; /*()*/
public NslDoutFloat0 verticalVelocity ; /*()*/
public NslDoutFloat0 horizontalTheta ; /*()*/
public NslDoutFloat0 verticalTheta ; /*()*/
public NslDoutFloat2 saccademask ; /*(stdsz,stdsz)*/
 
//vars
private LLBN llbn1 ; /*(stdsz)*/
private Motor motorl ; /*(stdsz,1)*///left
private Motor motorr ; /*(stdsz,2)*///right
private Motor motoru ; /*(stdsz,3)*///up
private Motor motord ; /*(stdsz,4)*///down
private EyePositionAndVelocity eyePosAndVel1 ; /*()*/
private TNChange tnChangel ; /*()*///left
private TNChange tnChanger ; /*()*///right
private TNChange tnChangeu ; /*()*///up
private TNChange tnChanged ; /*()*///down

private Bursters bursters1 ; /*(stdsz)*/

public  void makeConn() {
	// inputs	
	nslConnect(supcol, llbn1.supcol);
	nslConnect(fefsac, llbn1.fefsac);

	nslConnect(supcol,motorl.supcol);	
	nslConnect(supcol,motorr.supcol);	
	nslConnect(supcol,motoru.supcol);	
	nslConnect(supcol,motord.supcol);	

	nslConnect(fefsac,motorl.fefsac);
	nslConnect(fefsac,motorr.fefsac);
	nslConnect(fefsac,motoru.fefsac);
	nslConnect(fefsac,motord.fefsac);

	//middles
	nslConnect(llbn1.llbn,motorl.llbn);
	nslConnect(llbn1.llbn,motorr.llbn);
	nslConnect(llbn1.llbn,motoru.llbn);
	nslConnect(llbn1.llbn,motord.llbn);


	//nslConnect(motorl.ebn,motorr.opposite_ebn);
	//nslConnect(motorr.ebn,motorl.opposite_ebn);
	//nslConnect(motoru.ebn,motord.opposite_ebn);
	//nslConnect(motord.ebn,motoru.opposite_ebn);

	nslConnect(motorl.ebn,bursters1.lebn);
	nslConnect(motorr.ebn,bursters1.rebn);
	nslConnect(motoru.ebn,bursters1.uebn);
	nslConnect(motord.ebn,bursters1.debn);


	nslConnect(motorl.ebn,tnChangel.ebn);
	nslConnect(motorr.ebn,tnChanger.ebn);
	nslConnect(motoru.ebn,tnChangeu.ebn);
	nslConnect(motord.ebn,tnChanged.ebn);

        // note: the TN Change in Theta calculations require both ebns
	nslConnect(motorl.ebn,tnChanger.opposite_ebn);
	nslConnect(motorr.ebn,tnChangel.opposite_ebn);
	nslConnect(motoru.ebn,tnChanged.opposite_ebn);
	nslConnect(motord.ebn,tnChangeu.opposite_ebn);

	nslConnect(motorl.ebn,eyePosAndVel1.lebn);
	nslConnect(motorr.ebn,eyePosAndVel1.rebn);
	nslConnect(motoru.ebn,eyePosAndVel1.uebn);
	nslConnect(motord.ebn,eyePosAndVel1.debn);

	nslConnect(motorl.fefgate,tnChangel.fefgate);
	nslConnect(motorr.fefgate,tnChanger.fefgate);
	nslConnect(motoru.fefgate,tnChangeu.fefgate);
	nslConnect(motord.fefgate,tnChanged.fefgate);

	nslConnect(motorl.tnDelta,tnChangel.tnDelta);
	nslConnect(motorr.tnDelta,tnChanger.tnDelta);
	nslConnect(motoru.tnDelta,tnChangeu.tnDelta);
	nslConnect(motord.tnDelta,tnChanged.tnDelta);

	nslConnect(tnChangel.tn,motorl.tn);
	nslConnect(tnChanger.tn,motorr.tn);
	nslConnect(tnChangeu.tn,motoru.tn);
	nslConnect(tnChanged.tn,motord.tn);

	nslConnect(tnChangel.tn,eyePosAndVel1.ltn);
	nslConnect(tnChanger.tn,eyePosAndVel1.rtn);
	nslConnect(tnChangeu.tn,eyePosAndVel1.utn);
	nslConnect(tnChanged.tn,eyePosAndVel1.dtn);

	nslConnect(tnChangel.tnChange,eyePosAndVel1.ltnChange);
	nslConnect(tnChanger.tnChange,eyePosAndVel1.rtnChange);
	nslConnect(tnChangeu.tnChange,eyePosAndVel1.utnChange);
	nslConnect(tnChanged.tnChange,eyePosAndVel1.dtnChange);

	// outputs

	nslConnect(eyePosAndVel1.horizontalVelocity,horizontalVelocity);
	nslConnect(eyePosAndVel1.verticalVelocity,verticalVelocity);
	nslConnect(eyePosAndVel1.horizontalTheta,horizontalTheta);
	nslConnect(eyePosAndVel1.verticalTheta, verticalTheta);

	nslConnect(bursters1.saccademask,saccademask);
}


public  void simRun() {
	if (system.debug>=2) {
		System.out.println("BrainStem:simRun");
	}
}


	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	/* constructor and related methods */
	/* nsl declarations */
	int stdsz;
	int numOfDirections;
	NslFloat0 nWTAThreshold;

	 /*GENERIC CONSTRUCTOR:   */
	 public BrainStem(String nslName, NslModule nslParent,int stdsz, int numOfDirections, NslFloat0 nWTAThreshold) {
		super(nslName, nslParent);
		this.stdsz = stdsz;
		this.numOfDirections = numOfDirections;
		this.nWTAThreshold = nWTAThreshold;
		initSys();
		makeInst(nslName, nslParent,stdsz, numOfDirections, nWTAThreshold);
	}
	public void makeInst(String nslName, NslModule nslParent,int stdsz,int numOfDirections,NslFloat0 nWTAThreshold){ 
	 supcol=new NslDinFloat2 ("supcol",this,stdsz,stdsz); //NSLDECLS 
	 fefsac=new NslDinFloat2 ("fefsac",this,stdsz,stdsz); //NSLDECLS 
	 horizontalVelocity=new NslDoutFloat0 ("horizontalVelocity",this); //NSLDECLS 
	 verticalVelocity=new NslDoutFloat0 ("verticalVelocity",this); //NSLDECLS 
	 horizontalTheta=new NslDoutFloat0 ("horizontalTheta",this); //NSLDECLS 
	 verticalTheta=new NslDoutFloat0 ("verticalTheta",this); //NSLDECLS 
	 saccademask=new NslDoutFloat2 ("saccademask",this,stdsz,stdsz); //NSLDECLS 
	 llbn1=new LLBN ("llbn1",this,stdsz); //NSLDECLS 
	 motorl=new Motor ("motorl",this,stdsz,1); //NSLDECLS 
	 motorr=new Motor ("motorr",this,stdsz,2); //NSLDECLS 
	 motoru=new Motor ("motoru",this,stdsz,3); //NSLDECLS 
	 motord=new Motor ("motord",this,stdsz,4); //NSLDECLS 
	 eyePosAndVel1=new EyePositionAndVelocity ("eyePosAndVel1",this); //NSLDECLS 
	 tnChangel=new TNChange ("tnChangel",this); //NSLDECLS 
	 tnChanger=new TNChange ("tnChanger",this); //NSLDECLS 
	 tnChangeu=new TNChange ("tnChangeu",this); //NSLDECLS 
	 tnChanged=new TNChange ("tnChanged",this); //NSLDECLS 
	 bursters1=new Bursters ("bursters1",this,stdsz); //NSLDECLS 
	}
	/* end of automatic declaration statements */
} // end of class
