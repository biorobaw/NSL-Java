/* SCCS  %W--- %G% -- %U% */
//
// MaxSelectorModel 
//
//////////////////////////////////////////////////////////////////////
/**
 * MaxSelector - A class representing the Didday Model or Maximum Selector Model.
 * The neuron (element) with the greatest strength will propogate to the output
 * of the model blocking out the signal by other neurons.
 * @see            MaxSelector.mod
 * @version        3.0.k 99/4/30
 * @author         HBP
 * #var private: w1 weight constant used in u membrane potential calculation. <p>
 * #var private: w2 weight constant used in u membrane potential calculation.<p>
 * #var private: h1 is a constant that must be 0 <= h1, and is use d in u membrane potential calculation.<p>
 * #var private: h2 is a constant that must be 0<=h2<1 , and is use d in v membrane potential calculation.<p>
 * #var private: k is a threshold constant used in the step function when calculating u firing rate.<p>
 * #var private: s1 is the source array of type NslDouble1  <p>
 * #var private: u_pot holds the membrane potentials for the first layer of type NslDouble1  <p>
 * #var private: u holds the firing rates for the first layer of type NslDouble1  <p>
 * #var private: v_pot holds the membrane potentials for the second layer of type NslDouble0 <p>
 * #var private: v holds the firing rates for the second layer of type NslDouble0 <p>
*/

/* MaxSelectorModel is the name of the model */
/* MaxSelectorModel does not contain any outside ports, but does inherit NslModel */

/*********************************/
/*                               */
/*   Importing all Nsl classes   */
/*                               */
/*********************************/

import nslj.src.system.*;
import nslj.src.cmd.*;
import nslj.src.lang.*;
import nslj.src.math.*;
import nslj.src.display.*;

/*********************************/

public class MaxSelectorModel extends NslModel {
 
    private static final int size = 10;

    private  MaxSelectorStimulus stimulus;
    private  MaxSelector maxselector;  
    private  MaxSelectorOutput output;  

    public void initSys() {
	system.setRunEndTime(10.0);
	system.nslSetRunDelta(0.1);
    }

    public void makeConn() {
        nslConnect(stimulus.s_out, maxselector.in);
	nslConnect(stimulus.s_out, output.s_out);
	nslConnect(maxselector.out, output.uf); 
    }

	/******************************************************/
	/*                                                    */
	/* Generated by NslCompiler. Do not edit these lines! */
	/*                                                    */
	/******************************************************/

	/* Constructor and related methods */
	/* makeinst() declared variables */

	/* EMPTY CONSTRUCTOR: Called only for the top level module */
	public MaxSelectorModel() {
		super("maxSelectorModel",(NslModel)null);
		if (NslMain.TopLoaded) {
		    System.err.println("ERROR: construction without (name,parent)");
		    System.exit(1);
		}
		NslMain.TopLoaded=true; 
		initSys();
		makeInst("maxSelectorModel",null);
	}

	/* Formal parameters */

	/* Temporary variables */

	/* GENERIC CONSTRUCTOR: */
	public MaxSelectorModel(String nslName, NslModule nslParent) {
		super(nslName, nslParent);
		initSys();
		makeInst(nslName, nslParent);
	}

	public void makeInst(String nslName, NslModule nslParent) { 
		callFromConstructorTop();
		stimulus = new MaxSelectorStimulus("stimulus", this, size);
		maxselector = new MaxSelector("maxselector", this, size);
		output = new MaxSelectorOutput("output", this, size);
		callFromConstructorBottom();
	}

	/******************************************************/
	/*                                                    */
	/* End of automatic declaration statements.           */
	/*                                                    */
	/******************************************************/


}




