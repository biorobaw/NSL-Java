/* This file is generated by  NSL3.0 preprocessor*/

/* SCCS %W%---%G%--%U% */

/* Copyright 1999 University of Southern California Brain Lab */
/* Author Jacob Spoelstra */
/* email nsl@java.usc.edu */

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class NUC_layer extends NslModule/*()*/ {
    // constants
    static final  double f_max  = 100.;
    static final  double offset = -.30;  // output = 50 for 0 input
    static final  double slope  = .08;
    // inports
    NslDinDouble2 pp_in ; /*()*/  // PP input
    NslDinDouble2 pc_in ; /*()*/  // PC input
    // outports
    NslDoutDouble1 nuc_out ; /*(2)*/ 
    // variables
    NslDouble1 nuc_mp ; /*(2)*/
    
 public  void initModule(){
     nuc_out.set(50);
 }
 
 public  void simTrain() {
     simRun();
 }
 
 public  void simRun(){
     // Map inputs onto 2x1 array
     NslDouble2 td = new NslDouble2(2,10);
     (td).set(0,NslSumColumns.eval(NslGetSector.eval(pp_in,0,0,4,9)))/* rule 100 */;
     (td).set(1,NslSumColumns.eval(NslGetSector.eval(pp_in,5,0,9,9)))/* rule 100 */;
     nuc_mp.set(NslAdd.eval(NslSumRows.eval(
 __nsltmp101=nslj.src.math.NslElemMult.eval(__nsltmp101,2,td.get())),NslSumRows.eval(
 __nsltmp102=nslj.src.math.NslElemMult.eval(__nsltmp102,-(.2),pc_in.get())))) /* rule 108 */;
     nuc_out.set(
 __nsltmp103=nslj.src.math.NslElemMult.eval(__nsltmp103,f_max,NslSigmoid.eval(nuc_mp,slope,offset)));
 }
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new double[1][1];
	__nsltmp102 = new double[1][1];
	__nsltmp103 = new double[1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		for (int j = 0; j < __nsltmp101[0].length; j++) {
			__nsltmp101[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp102.length; i++) {
		for (int j = 0; j < __nsltmp102[0].length; j++) {
			__nsltmp102[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp103.length; i++) {
		__nsltmp103[i] = 0;
}
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  double[][] __nsltmp101;
	private  double[][] __nsltmp102;
	private  double[] __nsltmp103;
	/* constructor and related methods */
	/* nsl declarations */

	 /*GENERIC CONSTRUCTOR:   */
	 public NUC_layer(String nslName, NslModule nslParent) {
		super(nslName, nslParent);
		initSys();
		makeInst(nslName, nslParent);
	}
	public void makeInst(String nslName, NslModule nslParent){ 
	 pp_in=new NslDinDouble2 ("pp_in",this); //NSLDECLS 
	 pc_in=new NslDinDouble2 ("pc_in",this); //NSLDECLS 
	 nuc_out=new NslDoutDouble1 ("nuc_out",this,2); //NSLDECLS 
	 nuc_mp=new NslDouble1 ("nuc_mp",this,2); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
